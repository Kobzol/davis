{"version":3,"sources":["./src async","./src/app/app.module.ts","./src/app/assembly/asm-parser.peg","./src/app/assembly/assembler.ts","./src/app/assembly/encoding.ts","./src/app/assembly/label.ts","./src/app/assembly/program.ts","./src/app/components/app/app.html","./src/app/components/app/app.ts","./src/app/components/asm-editor/asm-editor.html","./src/app/components/asm-editor/asm-editor.ts","./src/app/components/console/console.html","./src/app/components/console/console.ts","./src/app/components/cpu/cpu.html","./src/app/components/cpu/cpu.ts","./src/app/components/cpu/register.html","./src/app/components/cpu/register.ts","./src/app/components/execution/execution.html","./src/app/components/execution/execution.ts","./src/app/components/memory/memory.html","./src/app/components/memory/memory.ts","./src/app/emulation/alu.ts","./src/app/emulation/condition-unit.ts","./src/app/emulation/cpu.ts","./src/app/emulation/instruction/arithmetic.ts","./src/app/emulation/instruction/bitwise.ts","./src/app/emulation/instruction/cmp.ts","./src/app/emulation/instruction/flags.ts","./src/app/emulation/instruction/halt.ts","./src/app/emulation/instruction/instruction.ts","./src/app/emulation/instruction/interrupt.ts","./src/app/emulation/instruction/jump.ts","./src/app/emulation/instruction/mov.ts","./src/app/emulation/instruction/parameter.ts","./src/app/emulation/instruction/pop.ts","./src/app/emulation/instruction/push.ts","./src/app/emulation/instruction/retcall.ts","./src/app/emulation/memory-block.ts","./src/app/emulation/memory-view.ts","./src/app/emulation/process.ts","./src/app/emulation/runtime-exception.ts","./src/app/emulation/runtime.ts","./src/app/emulation/status-word.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AACA,uCAAuC,WAAW;AAClD;AACA;AACA,iD;;;;;;;;;;;;;;;;;;;;;;;;;ACN0D;AACjB;AAEW;AACF;AACU;AACD;AACS;AACN;AACQ;AAC3B;AAmB3C,IAAa,SAAS;IAAtB;IAGA,CAAC;IAAD,gBAAC;AAAD,CAAC;AAHY,SAAS;IAjBrB,sFAAQ,CAAC;QACR,YAAY,EAAE;YACV,yEAAY;YACZ,yEAAY;YACZ,mFAAiB;YACjB,kFAAe;YACf,2FAAkB;YAClB,qFAAgB;YAChB,6FAAkB;SACrB;QACD,OAAO,EAAE;YACP,gFAAa;YACb,mEAAW;SACZ;QACD,SAAS,EAAE,EAAE;QACb,SAAS,EAAE,CAAC,yEAAY,CAAC;KAC1B,CAAC;GACW,SAAS,CAGrB;AAHqB;;;;;;;;AC7BtB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,qBAAqB,0BAA0B;AAC/C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,WAAW;;AAEX;AACA;AACA;;AAEA,uBAAuB,8BAA8B;AACrD;AACA;AACA;AACA;;AAEA;AACA,WAAW;;AAEX;AACA;AACA,WAAW;;AAEX;AACA;AACA,WAAW;;AAEX;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,yBAAyB,EAAE;AACnF,wDAAwD,yBAAyB,EAAE;AACnF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,yBAAyB,EAAE;AACnF,wDAAwD,yBAAyB,EAAE;AACnF;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,iBAAiB,qBAAqB;AACtC;AACA;;AAEA;;AAEA;AACA,0BAA0B,yBAAyB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,uBAAuB;;AAEvB,kCAAkC,wBAAwB;AAC1D;;AAEA;AACA;AACA;AACA;AACA,iCAAiC,SAAS,oCAAoC,EAAE;AAChF,iCAAiC,aAAa,EAAE;AAChD;AACA;AACA,uCAAuC,SAAS,oCAAoC,EAAE;AACtF,uCAAuC,aAAa,EAAE;AACtD,wCAAwC,SAAS,mEAAmE,EAAE;AACtH,oBAAoB;AACpB,2CAA2C;AAC3C;AACA;AACA;AACA;AACA,sDAAsD,UAAU,EAAE;AAClE;AACA,qBAAqB;AACrB,aAAa;AACb,mCAAmC,SAAS,2CAA2C,EAAE;AACzF;AACA;AACA,8BAA8B,UAAU,EAAE;AAC1C;AACA;AACA,8BAA8B,UAAU,EAAE;AAC1C;AACA;AACA,8BAA8B,UAAU,EAAE;AAC1C,yCAAyC,SAAS,gDAAgD,EAAE;AACpG,mCAAmC,SAAS,gDAAgD,EAAE;AAC9F;AACA;AACA;AACA;AACA,yCAAyC,SAAS,mDAAmD,EAAE;AACvG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,SAAS,uDAAuD,EAAE;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,SAAS,oEAAoE,EAAE;AAC1H;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,SAAS,6EAA6E,EAAE;AACnI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,SAAS,8EAA8E,EAAE;AAC5I;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,SAAS,kFAAkF,EAAE;AAChJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,SAAS,0EAA0E,EAAE;AAChI;AACA;AACA,6CAA6C,SAAS,yEAAyE,EAAE;AACjI,0CAA0C,SAAS,yCAAyC,EAAE;AAC9F;AACA;AACA;AACA;AACA,2CAA2C,SAAS,+DAA+D,EAAE;AACrH,4CAA4C,SAAS,iEAAiE,EAAE;AACxH,4CAA4C,SAAS,6EAA6E,EAAE;AACpI;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,mDAAmD,SAAS,mDAAmD,EAAE;AACjH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,8CAA8C,SAAS,oCAAoC,EAAE;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,SAAS,qCAAqC,EAAE;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,SAAS,oCAAoC,EAAE;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,SAAS,oCAAoC,EAAE;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,UAAU,EAAE;AAC3C;AACA;AACA;AACA;AACA,+BAA+B,SAAS,oCAAoC,EAAE;AAC9E;AACA;AACA;AACA;AACA,+BAA+B,SAAS,uDAAuD,EAAE;AACjG;AACA;AACA,+BAA+B,SAAS,uDAAuD,EAAE;AACjG;AACA;AACA;AACA;AACA,+BAA+B,YAAY,EAAE;AAC7C;AACA;AACA,oCAAoC,SAAS,+BAA+B,EAAE;AAC9E;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iCAAiC,qBAAqB;AACtD;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,cAAc;AACd;;AAEA;AACA,cAAc;AACd;;AAEA;AACA,cAAc;AACd;;AAEA;AACA,cAAc;AACd;;AAEA;AACA,cAAc;AACd;;AAEA;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,yCAAyC,QAAQ;;AAEjD;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,sCAAsC,kBAAkB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,0CAA0C,kBAAkB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,0CAA0C,kBAAkB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,8CAA8C,kBAAkB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,sCAAsC,mBAAmB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,wCAAwC,mBAAmB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,0CAA0C,mBAAmB;AAC7D;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA,gDAAgD,mBAAmB;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,kDAAkD,mBAAmB;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,oCAAoC,mBAAmB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,sCAAsC,mBAAmB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,wCAAwC,mBAAmB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,oCAAoC,mBAAmB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,wCAAwC,mBAAmB;AAC3D;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,oCAAoC,mBAAmB;AACvD;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,sCAAsC,mBAAmB;AACzD;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,wCAAwC,mBAAmB;AAC3D;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,0CAA0C,mBAAmB;AAC7D;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA,4CAA4C,mBAAmB;AAC/D;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,8CAA8C,mBAAmB;AACjE;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA,gDAAgD,mBAAmB;AACnE;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,kDAAkD,mBAAmB;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,oCAAoC,mBAAmB;AACvD;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,sCAAsC,mBAAmB;AACzD;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,wCAAwC,mBAAmB;AAC3D;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,0CAA0C,mBAAmB;AAC7D;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA,4CAA4C,mBAAmB;AAC/D;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,8CAA8C,mBAAmB;AACjE;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA,gDAAgD,mBAAmB;AACnE;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,kDAAkD,mBAAmB;AACrE;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA,oDAAoD,mBAAmB;AACvE;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,sDAAsD,mBAAmB;AACzE;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA,wDAAwD,mBAAmB;AAC3E;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,0DAA0D,mBAAmB;AAC7E;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA,4DAA4D,mBAAmB;AAC/E;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA,8DAA8D,mBAAmB;AACjF;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA,gEAAgE,mBAAmB;AACnF;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA,kEAAkE,mBAAmB;AACrF;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA,oEAAoE,mBAAmB;AACvF;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA,sEAAsE,mBAAmB;AACzF;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA,wEAAwE,mBAAmB;AAC3F;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA,0EAA0E,mBAAmB;AAC7F;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA,4EAA4E,mBAAmB;AAC/F;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA,8EAA8E,mBAAmB;AACjG;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD;AACA,gFAAgF,mBAAmB;AACnG;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrD;AACA,kFAAkF,oBAAoB;AACtG;AACA;AACA;AACA;AACA;AACA,uDAAuD;AACvD;AACA,oFAAoF,oBAAoB;AACxG;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA,sFAAsF,oBAAoB;AAC1G;AACA;AACA;AACA;AACA;AACA,2DAA2D;AAC3D;AACA,wFAAwF,oBAAoB;AAC5G;AACA;AACA;AACA;AACA;AACA,6DAA6D;AAC7D;AACA,0FAA0F,oBAAoB;AAC9G;AACA;AACA;AACA;AACA;AACA,+DAA+D;AAC/D;AACA,4FAA4F,oBAAoB;AAChH;AACA;AACA;AACA;AACA;AACA,iEAAiE;AACjE;AACA,8FAA8F,oBAAoB;AAClH;AACA;AACA;AACA;AACA;AACA,mEAAmE;AACnE;AACA,gGAAgG,oBAAoB;AACpH;AACA;AACA;AACA;AACA;AACA,qEAAqE;AACrE;AACA,kGAAkG,oBAAoB;AACtH;AACA;AACA;AACA;AACA;AACA,uEAAuE;AACvE;AACA,oGAAoG,oBAAoB;AACxH;AACA;AACA;AACA;AACA;AACA,yEAAyE;AACzE;AACA,sGAAsG,oBAAoB;AAC1H;AACA;AACA;AACA;AACA;AACA,2EAA2E;AAC3E;AACA,wGAAwG,oBAAoB;AAC5H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,oCAAoC,oBAAoB;AACxD;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,sCAAsC,oBAAoB;AAC1D;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,wCAAwC,oBAAoB;AAC5D;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,sCAAsC,oBAAoB;AAC1D;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,wCAAwC,oBAAoB;AAC5D;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,oCAAoC,oBAAoB;AACxD;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,sCAAsC,oBAAoB;AAC1D;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA,4CAA4C,mBAAmB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,oCAAoC,oBAAoB;AACxD;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,sCAAsC,oBAAoB;AAC1D;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,wCAAwC,oBAAoB;AAC5D;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,0CAA0C,oBAAoB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,0CAA0C,mBAAmB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,sCAAsC,oBAAoB;AAC1D;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,wCAAwC,oBAAoB;AAC5D;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,0CAA0C,oBAAoB;AAC9D;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA,4CAA4C,oBAAoB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,oCAAoC,oBAAoB;AACxD;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA,4CAA4C,mBAAmB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,oCAAoC,oBAAoB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA,gDAAgD,oBAAoB;AACpE;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,sCAAsC,oBAAoB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,kDAAkD,oBAAoB;AACtE;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,oCAAoC,mBAAmB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,oCAAoC,oBAAoB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA,gDAAgD,oBAAoB;AACpE;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,oCAAoC,oBAAoB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA,4CAA4C,oBAAoB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,wCAAwC,oBAAoB;AAC5D;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,0CAA0C,oBAAoB;AAC9D;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,oCAAoC,oBAAoB;AACxD;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,sCAAsC,oBAAoB;AAC1D;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,wCAAwC,oBAAoB;AAC5D;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,0CAA0C,oBAAoB;AAC9D;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA,4CAA4C,oBAAoB;AAChE;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,8CAA8C,oBAAoB;AAClE;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA,gDAAgD,oBAAoB;AACpE;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,kDAAkD,oBAAoB;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,sCAAsC,oBAAoB;AAC1D;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,wCAAwC,oBAAoB;AAC5D;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,0CAA0C,oBAAoB;AAC9D;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA,4CAA4C,oBAAoB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,wCAAwC,oBAAoB;AAC5D;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,0CAA0C,oBAAoB;AAC9D;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA,4CAA4C,oBAAoB;AAChE;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,8CAA8C,oBAAoB;AAClE;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA,gDAAgD,oBAAoB;AACpE;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,kDAAkD,oBAAoB;AACtE;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA,oDAAoD,oBAAoB;AACxE;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,sDAAsD,oBAAoB;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,oCAAoC,oBAAoB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,sCAAsC,oBAAoB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,wCAAwC,oBAAoB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,oCAAoC,oBAAoB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,sCAAsC,oBAAoB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,wCAAwC,oBAAoB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,oCAAoC,oBAAoB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,sCAAsC,oBAAoB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,0CAA0C,oBAAoB;AAC9D;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,sCAAsC,oBAAoB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,0CAA0C,oBAAoB;AAC9D;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,oCAAoC,oBAAoB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,sCAAsC,oBAAoB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,wCAAwC,oBAAoB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,wCAAwC,oBAAoB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,0CAA0C,oBAAoB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,wCAAwC,oBAAoB;AAC5D;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,oCAAoC,oBAAoB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,sCAAsC,oBAAoB;AAC1D;AACA;AACA;AACA;AACA;AACA,oCAAoC,oBAAoB;AACxD;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,oCAAoC,oBAAoB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,sCAAsC,oBAAoB;AAC1D;AACA;AACA;AACA;AACA;AACA,oCAAoC,oBAAoB;AACxD;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC,I;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3hG2B;AACe;AACG;AACI;AAIN;AACI;AAIT;AACsB;AACZ;AACE;AACyB;AACvB;AAIR;AACiB;AACxB;AAC4D;AAC/C;AAEnD,IAAI,MAAM,GAAG,mBAAO,CAAC,mCAAkB,CAAC,CAAC;AAEzC,IAAM,kBAAkB,GAAG;IACvB,KAAK,EAAO,wEAAI;IAChB,KAAK,EAAO,mFAAS;IACrB,KAAK,EAAO,0EAAI;IAChB,KAAK,EAAO,uEAA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","file":"main.bundle.js","sourcesContent":["function webpackEmptyContext(req) {\n\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = \"./src async recursive\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src async\n// module id = ./src async recursive\n// module chunks = 1","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './components/app/app';\nimport {CpuComponent} from \"./components/cpu/cpu\";\nimport {RegisterComponent} from \"./components/cpu/register\";\nimport {MemoryComponent} from \"./components/memory/memory\";\nimport {ExecutionComponent} from \"./components/execution/execution\";\nimport {ConsoleComponent} from \"./components/console/console\";\nimport {AsmEditorComponent} from \"./components/asm-editor/asm-editor\";\nimport {FormsModule} from \"@angular/forms\";\n\n@NgModule({\n  declarations: [\n      AppComponent,\n      CpuComponent,\n      RegisterComponent,\n      MemoryComponent,\n      ExecutionComponent,\n      ConsoleComponent,\n      AsmEditorComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule\n{\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.module.ts","module.exports = /*\n * Generated by PEG.js 0.10.0.\n *\n * http://pegjs.org/\n */\n(function() {\n  \"use strict\";\n\n  function peg$subclass(child, parent) {\n    function ctor() { this.constructor = child; }\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor();\n  }\n\n  function peg$SyntaxError(message, expected, found, location) {\n    this.message  = message;\n    this.expected = expected;\n    this.found    = found;\n    this.location = location;\n    this.name     = \"SyntaxError\";\n\n    if (typeof Error.captureStackTrace === \"function\") {\n      Error.captureStackTrace(this, peg$SyntaxError);\n    }\n  }\n\n  peg$subclass(peg$SyntaxError, Error);\n\n  peg$SyntaxError.buildMessage = function(expected, found) {\n    var DESCRIBE_EXPECTATION_FNS = {\n          literal: function(expectation) {\n            return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n          },\n\n          \"class\": function(expectation) {\n            var escapedParts = \"\",\n                i;\n\n            for (i = 0; i < expectation.parts.length; i++) {\n              escapedParts += expectation.parts[i] instanceof Array\n                ? classEscape(expectation.parts[i][0]) + \"-\" + classEscape(expectation.parts[i][1])\n                : classEscape(expectation.parts[i]);\n            }\n\n            return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n          },\n\n          any: function(expectation) {\n            return \"any character\";\n          },\n\n          end: function(expectation) {\n            return \"end of input\";\n          },\n\n          other: function(expectation) {\n            return expectation.description;\n          }\n        };\n\n    function hex(ch) {\n      return ch.charCodeAt(0).toString(16).toUpperCase();\n    }\n\n    function literalEscape(s) {\n      return s\n        .replace(/\\\\/g, '\\\\\\\\')\n        .replace(/\"/g,  '\\\\\"')\n        .replace(/\\0/g, '\\\\0')\n        .replace(/\\t/g, '\\\\t')\n        .replace(/\\n/g, '\\\\n')\n        .replace(/\\r/g, '\\\\r')\n        .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n        .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n    }\n\n    function classEscape(s) {\n      return s\n        .replace(/\\\\/g, '\\\\\\\\')\n        .replace(/\\]/g, '\\\\]')\n        .replace(/\\^/g, '\\\\^')\n        .replace(/-/g,  '\\\\-')\n        .replace(/\\0/g, '\\\\0')\n        .replace(/\\t/g, '\\\\t')\n        .replace(/\\n/g, '\\\\n')\n        .replace(/\\r/g, '\\\\r')\n        .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n        .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n    }\n\n    function describeExpectation(expectation) {\n      return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n    }\n\n    function describeExpected(expected) {\n      var descriptions = new Array(expected.length),\n          i, j;\n\n      for (i = 0; i < expected.length; i++) {\n        descriptions[i] = describeExpectation(expected[i]);\n      }\n\n      descriptions.sort();\n\n      if (descriptions.length > 0) {\n        for (i = 1, j = 1; i < descriptions.length; i++) {\n          if (descriptions[i - 1] !== descriptions[i]) {\n            descriptions[j] = descriptions[i];\n            j++;\n          }\n        }\n        descriptions.length = j;\n      }\n\n      switch (descriptions.length) {\n        case 1:\n          return descriptions[0];\n\n        case 2:\n          return descriptions[0] + \" or \" + descriptions[1];\n\n        default:\n          return descriptions.slice(0, -1).join(\", \")\n            + \", or \"\n            + descriptions[descriptions.length - 1];\n      }\n    }\n\n    function describeFound(found) {\n      return found ? \"\\\"\" + literalEscape(found) + \"\\\"\" : \"end of input\";\n    }\n\n    return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n  };\n\n  function peg$parse(input, options) {\n    options = options !== void 0 ? options : {};\n\n    var peg$FAILED = {},\n\n        peg$startRuleFunctions = { Start: peg$parseStart },\n        peg$startRuleFunction  = peg$parseStart,\n\n        peg$c0 = \"section\",\n        peg$c1 = peg$literalExpectation(\"section\", true),\n        peg$c2 = \".data\",\n        peg$c3 = peg$literalExpectation(\".data\", true),\n        peg$c4 = function(data) { return { line: data, location: location() }; },\n        peg$c5 = function(data) { return data; },\n        peg$c6 = \".text\",\n        peg$c7 = peg$literalExpectation(\".text\", true),\n        peg$c8 = function(data, text) { return { line: text, location: location() }; },\n        peg$c9 = function(data, text) { return text; },\n        peg$c10 = function(data, text) { return { data: data !== null ? data : [], text: text !== null ? text : []}; },\n        peg$c11 = \";\",\n        peg$c12 = peg$literalExpectation(\";\", false),\n        peg$c13 = /^[^\\n]/,\n        peg$c14 = peg$classExpectation([\"\\n\"], true, false),\n        peg$c15 = \",\",\n        peg$c16 = peg$literalExpectation(\",\", false),\n        peg$c17 = function(label, size, constant, c) { return c; },\n        peg$c18 = function(label, size, constant, constants) {\r\n            \treturn { label: label, size: size, constants: [constant].concat(constants) };\r\n            },\n        peg$c19 = function(label) { return { label: label, size: null, constants: [] }; },\n        peg$c20 = \"db\",\n        peg$c21 = peg$literalExpectation(\"db\", true),\n        peg$c22 = function() { return 1; },\n        peg$c23 = \"dw\",\n        peg$c24 = peg$literalExpectation(\"dw\", true),\n        peg$c25 = function() { return 2; },\n        peg$c26 = \"dd\",\n        peg$c27 = peg$literalExpectation(\"dd\", true),\n        peg$c28 = function() { return 4; },\n        peg$c29 = function(label, inst) { return { tag: \"Line\", label: label, instruction: inst }; },\n        peg$c30 = function(label) { return { tag: \"Line\", label: label, instruction: null }; },\n        peg$c31 = \".\",\n        peg$c32 = peg$literalExpectation(\".\", false),\n        peg$c33 = \":\",\n        peg$c34 = peg$literalExpectation(\":\", false),\n        peg$c35 = function(local, name) { return { tag: \"Label\", name: name, local: local !== null }; },\n        peg$c36 = \"cld\",\n        peg$c37 = peg$literalExpectation(\"CLD\", true),\n        peg$c38 = \"std\",\n        peg$c39 = peg$literalExpectation(\"STD\", true),\n        peg$c40 = \"clc\",\n        peg$c41 = peg$literalExpectation(\"CLC\", true),\n        peg$c42 = \"stc\",\n        peg$c43 = peg$literalExpectation(\"STC\", true),\n        peg$c44 = \"enter\",\n        peg$c45 = peg$literalExpectation(\"ENTER\", true),\n        peg$c46 = \"ret\",\n        peg$c47 = peg$literalExpectation(\"RET\", true),\n        peg$c48 = \"leave\",\n        peg$c49 = peg$literalExpectation(\"LEAVE\", true),\n        peg$c50 = \"hlt\",\n        peg$c51 = peg$literalExpectation(\"HLT\", true),\n        peg$c52 = function() { return { tag: \"Instruction\", type: \"NoOperand\", name: text() }; },\n        peg$c53 = \"jmp\",\n        peg$c54 = peg$literalExpectation(\"JMP\", true),\n        peg$c55 = \"je\",\n        peg$c56 = peg$literalExpectation(\"JE\", true),\n        peg$c57 = \"jne\",\n        peg$c58 = peg$literalExpectation(\"JNE\", true),\n        peg$c59 = \"jz\",\n        peg$c60 = peg$literalExpectation(\"JZ\", true),\n        peg$c61 = \"jnz\",\n        peg$c62 = peg$literalExpectation(\"JNZ\", true),\n        peg$c63 = \"jb\",\n        peg$c64 = peg$literalExpectation(\"JB\", true),\n        peg$c65 = \"jnae\",\n        peg$c66 = peg$literalExpectation(\"JNAE\", true),\n        peg$c67 = \"jc\",\n        peg$c68 = peg$literalExpectation(\"JC\", true),\n        peg$c69 = \"jnb\",\n        peg$c70 = peg$literalExpectation(\"JNB\", true),\n        peg$c71 = \"jae\",\n        peg$c72 = peg$literalExpectation(\"JAE\", true),\n        peg$c73 = \"jnc\",\n        peg$c74 = peg$literalExpectation(\"JNC\", true),\n        peg$c75 = \"jbe\",\n        peg$c76 = peg$literalExpectation(\"JBE\", true),\n        peg$c77 = \"jna\",\n        peg$c78 = peg$literalExpectation(\"JNA\", true),\n        peg$c79 = \"ja\",\n        peg$c80 = peg$literalExpectation(\"JA\", true),\n        peg$c81 = \"jnbe\",\n        peg$c82 = peg$literalExpectation(\"JNBE\", true),\n        peg$c83 = \"jl\",\n        peg$c84 = peg$literalExpectation(\"JL\", true),\n        peg$c85 = \"jnge\",\n        peg$c86 = peg$literalExpectation(\"JNGE\", true),\n        peg$c87 = \"jge\",\n        peg$c88 = peg$literalExpectation(\"JGE\", true),\n        peg$c89 = \"jnl\",\n        peg$c90 = peg$literalExpectation(\"JNL\", true),\n        peg$c91 = \"jle\",\n        peg$c92 = peg$literalExpectation(\"JLE\", true),\n        peg$c93 = \"jng\",\n        peg$c94 = peg$literalExpectation(\"JNG\", true),\n        peg$c95 = \"jg\",\n        peg$c96 = peg$literalExpectation(\"JG\", true),\n        peg$c97 = \"jnle\",\n        peg$c98 = peg$literalExpectation(\"JNLE\", true),\n        peg$c99 = \"jcxz\",\n        peg$c100 = peg$literalExpectation(\"JCXZ\", true),\n        peg$c101 = \"jecxz\",\n        peg$c102 = peg$literalExpectation(\"JECXZ\", true),\n        peg$c103 = \"jp\",\n        peg$c104 = peg$literalExpectation(\"JP\", true),\n        peg$c105 = \"jpe\",\n        peg$c106 = peg$literalExpectation(\"JPE\", true),\n        peg$c107 = \"jnp\",\n        peg$c108 = peg$literalExpectation(\"JNP\", true),\n        peg$c109 = \"jpo\",\n        peg$c110 = peg$literalExpectation(\"JPO\", true),\n        peg$c111 = \"jo\",\n        peg$c112 = peg$literalExpectation(\"JO\", true),\n        peg$c113 = \"jno\",\n        peg$c114 = peg$literalExpectation(\"JNO\", true),\n        peg$c115 = \"js\",\n        peg$c116 = peg$literalExpectation(\"JS\", true),\n        peg$c117 = \"jns\",\n        peg$c118 = peg$literalExpectation(\"JNS\", true),\n        peg$c119 = \"call\",\n        peg$c120 = peg$literalExpectation(\"CALL\", true),\n        peg$c121 = \"loop\",\n        peg$c122 = peg$literalExpectation(\"LOOP\", true),\n        peg$c123 = function(name, target) { return { tag: \"Instruction\", type: \"Jump\", name: name, operands: [target] }; },\n        peg$c124 = \"pop\",\n        peg$c125 = peg$literalExpectation(\"POP\", true),\n        peg$c126 = \"inc\",\n        peg$c127 = peg$literalExpectation(\"INC\", true),\n        peg$c128 = \"dec\",\n        peg$c129 = peg$literalExpectation(\"DEC\", true),\n        peg$c130 = function(name, target) { return { tag: \"Instruction\", type: \"SingleOperand\", name: name, operands: [target] }; },\n        peg$c131 = \"push\",\n        peg$c132 = peg$literalExpectation(\"PUSH\", true),\n        peg$c133 = \"int\",\n        peg$c134 = peg$literalExpectation(\"INT\", true),\n        peg$c135 = \"mov\",\n        peg$c136 = peg$literalExpectation(\"MOV\", true),\n        peg$c137 = \"movsx\",\n        peg$c138 = peg$literalExpectation(\"MOVSX\", true),\n        peg$c139 = function(name, target, source) { return { tag: \"Instruction\", type: \"Memory\", name: name, operands: [target, source] }; },\n        peg$c140 = \"add\",\n        peg$c141 = peg$literalExpectation(\"ADD\", true),\n        peg$c142 = \"sub\",\n        peg$c143 = peg$literalExpectation(\"SUB\", true),\n        peg$c144 = \"adc\",\n        peg$c145 = peg$literalExpectation(\"ADC\", true),\n        peg$c146 = \"sbb\",\n        peg$c147 = peg$literalExpectation(\"SBB\", true),\n        peg$c148 = function(name, target, source) { return { tag: \"Instruction\", type: \"Arithmetic\", name: name, operands: [target, source] }; },\n        peg$c149 = \"mul\",\n        peg$c150 = peg$literalExpectation(\"MUL\", true),\n        peg$c151 = \"imul\",\n        peg$c152 = peg$literalExpectation(\"IMUL\", true),\n        peg$c153 = \"div\",\n        peg$c154 = peg$literalExpectation(\"DIV\", true),\n        peg$c155 = \"idiv\",\n        peg$c156 = peg$literalExpectation(\"IDIV\", true),\n        peg$c157 = function(name, source) { return { tag: \"Instruction\", type: \"Arithmetic\", name: name, operands: [source] }; },\n        peg$c158 = \"cmp\",\n        peg$c159 = peg$literalExpectation(\"CMP\", true),\n        peg$c160 = function(name, op1, op2) { return { tag: \"Instruction\", type: \"Compare\", name: name, operands: [op1, op2] }; },\n        peg$c161 = function(cast, value) { return { tag: \"Cast\", size: cast, value: value }; },\n        peg$c162 = \"[\",\n        peg$c163 = peg$literalExpectation(\"[\", false),\n        peg$c164 = \"]\",\n        peg$c165 = peg$literalExpectation(\"]\", false),\n        peg$c166 = function(label, index) { return { tag: \"Label\", value: label.value, deref: true, index: index }; },\n        peg$c167 = function(number, index) { return { tag: \"Number\", value: number.value, deref: true, index: index }; },\n        peg$c168 = function(local, target) { return { tag: \"Label\", value: local !== null ? (\".\" + target.value) : target.value }; },\n        peg$c169 = function(baseReg, index) {\r\n            \treturn {\r\n            \t\ttag: \"Mem\",\r\n                \tbaseRegister: baseReg,\r\n                \tindex: index\r\n            \t};\r\n            },\n        peg$c170 = \"+\",\n        peg$c171 = peg$literalExpectation(\"+\", false),\n        peg$c172 = \"*\",\n        peg$c173 = peg$literalExpectation(\"*\", false),\n        peg$c174 = function(register, multiplier) { return { register: register, multiplier: multiplier.value } },\n        peg$c175 = \"-\",\n        peg$c176 = peg$literalExpectation(\"-\", false),\n        peg$c177 = function(index, operator, constant) {\r\n                            \tif (operator === \"-\")\r\n                            \t{\r\n                            \t\tconstant.value *= -1;\r\n                            \t}\r\n                            \treturn constant;\r\n                            },\n        peg$c178 = function(index, constant) { return { index: index, constant: constant }; },\n        peg$c179 = \"eax\",\n        peg$c180 = peg$literalExpectation(\"EAX\", true),\n        peg$c181 = \"ebx\",\n        peg$c182 = peg$literalExpectation(\"EBX\", true),\n        peg$c183 = \"ecx\",\n        peg$c184 = peg$literalExpectation(\"ECX\", true),\n        peg$c185 = \"edx\",\n        peg$c186 = peg$literalExpectation(\"EDX\", true),\n        peg$c187 = \"ebp\",\n        peg$c188 = peg$literalExpectation(\"EBP\", true),\n        peg$c189 = \"esp\",\n        peg$c190 = peg$literalExpectation(\"ESP\", true),\n        peg$c191 = \"edi\",\n        peg$c192 = peg$literalExpectation(\"EDI\", true),\n        peg$c193 = \"esi\",\n        peg$c194 = peg$literalExpectation(\"ESI\", true),\n        peg$c195 = function() { return { tag: \"Reg\", name: text(), size: 4 }; },\n        peg$c196 = \"ax\",\n        peg$c197 = peg$literalExpectation(\"AX\", true),\n        peg$c198 = \"bx\",\n        peg$c199 = peg$literalExpectation(\"BX\", true),\n        peg$c200 = \"cx\",\n        peg$c201 = peg$literalExpectation(\"CX\", true),\n        peg$c202 = \"dx\",\n        peg$c203 = peg$literalExpectation(\"DX\", true),\n        peg$c204 = function() { return { tag: \"Reg\", name: text(), size: 2 } },\n        peg$c205 = \"ah\",\n        peg$c206 = peg$literalExpectation(\"AH\", true),\n        peg$c207 = \"bh\",\n        peg$c208 = peg$literalExpectation(\"BH\", true),\n        peg$c209 = \"ch\",\n        peg$c210 = peg$literalExpectation(\"CH\", true),\n        peg$c211 = \"dh\",\n        peg$c212 = peg$literalExpectation(\"DH\", true),\n        peg$c213 = \"al\",\n        peg$c214 = peg$literalExpectation(\"AL\", true),\n        peg$c215 = \"bl\",\n        peg$c216 = peg$literalExpectation(\"BL\", true),\n        peg$c217 = \"cl\",\n        peg$c218 = peg$literalExpectation(\"CL\", true),\n        peg$c219 = \"dl\",\n        peg$c220 = peg$literalExpectation(\"DL\", true),\n        peg$c221 = function() { return { tag: \"Reg\", name: text(), size: 1 } },\n        peg$c222 = \"byte\",\n        peg$c223 = peg$literalExpectation(\"BYTE\", true),\n        peg$c224 = \"word\",\n        peg$c225 = peg$literalExpectation(\"WORD\", true),\n        peg$c226 = \"dword\",\n        peg$c227 = peg$literalExpectation(\"DWORD\", true),\n        peg$c228 = \"\",\n        peg$c229 = function() { return 0; },\n        peg$c230 = /^[a-zA-Z_]/,\n        peg$c231 = peg$classExpectation([[\"a\", \"z\"], [\"A\", \"Z\"], \"_\"], false, false),\n        peg$c232 = /^[a-zA-Z_0-9]/,\n        peg$c233 = peg$classExpectation([[\"a\", \"z\"], [\"A\", \"Z\"], \"_\", [\"0\", \"9\"]], false, false),\n        peg$c234 = function() { return { tag: \"Identifier\", value: text() }; },\n        peg$c235 = \"0x\",\n        peg$c236 = peg$literalExpectation(\"0x\", false),\n        peg$c237 = /^[0-9a-fA-F]/,\n        peg$c238 = peg$classExpectation([[\"0\", \"9\"], [\"a\", \"f\"], [\"A\", \"F\"]], false, false),\n        peg$c239 = function() { return { tag: \"Number\", value: parseInt(text(), 16), size: 4 }; },\n        peg$c240 = /^[0-9]/,\n        peg$c241 = peg$classExpectation([[\"0\", \"9\"]], false, false),\n        peg$c242 = function() { return { tag: \"Number\", value: parseInt(text(), 10), size: 4 }; },\n        peg$c243 = \"'\",\n        peg$c244 = peg$literalExpectation(\"'\", false),\n        peg$c245 = \"\\\\'\",\n        peg$c246 = peg$literalExpectation(\"\\\\'\", false),\n        peg$c247 = function() { return \"'\"; },\n        peg$c248 = /^[^']/,\n        peg$c249 = peg$classExpectation([\"'\"], true, false),\n        peg$c250 = function(value) { return { tag: \"String\", value: value }; },\n        peg$c251 = peg$otherExpectation(\"whitespace\"),\n        peg$c252 = /^[ \\t\\r]/,\n        peg$c253 = peg$classExpectation([\" \", \"\\t\", \"\\r\"], false, false),\n        peg$c254 = peg$otherExpectation(\"whitespace_plus_lines\"),\n        peg$c255 = /^[ \\t\\r\\n]/,\n        peg$c256 = peg$classExpectation([\" \", \"\\t\", \"\\r\", \"\\n\"], false, false),\n\n        peg$currPos          = 0,\n        peg$savedPos         = 0,\n        peg$posDetailsCache  = [{ line: 1, column: 1 }],\n        peg$maxFailPos       = 0,\n        peg$maxFailExpected  = [],\n        peg$silentFails      = 0,\n\n        peg$result;\n\n    if (\"startRule\" in options) {\n      if (!(options.startRule in peg$startRuleFunctions)) {\n        throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n      }\n\n      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n    }\n\n    function text() {\n      return input.substring(peg$savedPos, peg$currPos);\n    }\n\n    function location() {\n      return peg$computeLocation(peg$savedPos, peg$currPos);\n    }\n\n    function expected(description, location) {\n      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n      throw peg$buildStructuredError(\n        [peg$otherExpectation(description)],\n        input.substring(peg$savedPos, peg$currPos),\n        location\n      );\n    }\n\n    function error(message, location) {\n      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n      throw peg$buildSimpleError(message, location);\n    }\n\n    function peg$literalExpectation(text, ignoreCase) {\n      return { type: \"literal\", text: text, ignoreCase: ignoreCase };\n    }\n\n    function peg$classExpectation(parts, inverted, ignoreCase) {\n      return { type: \"class\", parts: parts, inverted: inverted, ignoreCase: ignoreCase };\n    }\n\n    function peg$anyExpectation() {\n      return { type: \"any\" };\n    }\n\n    function peg$endExpectation() {\n      return { type: \"end\" };\n    }\n\n    function peg$otherExpectation(description) {\n      return { type: \"other\", description: description };\n    }\n\n    function peg$computePosDetails(pos) {\n      var details = peg$posDetailsCache[pos], p;\n\n      if (details) {\n        return details;\n      } else {\n        p = pos - 1;\n        while (!peg$posDetailsCache[p]) {\n          p--;\n        }\n\n        details = peg$posDetailsCache[p];\n        details = {\n          line:   details.line,\n          column: details.column\n        };\n\n        while (p < pos) {\n          if (input.charCodeAt(p) === 10) {\n            details.line++;\n            details.column = 1;\n          } else {\n            details.column++;\n          }\n\n          p++;\n        }\n\n        peg$posDetailsCache[pos] = details;\n        return details;\n      }\n    }\n\n    function peg$computeLocation(startPos, endPos) {\n      var startPosDetails = peg$computePosDetails(startPos),\n          endPosDetails   = peg$computePosDetails(endPos);\n\n      return {\n        start: {\n          offset: startPos,\n          line:   startPosDetails.line,\n          column: startPosDetails.column\n        },\n        end: {\n          offset: endPos,\n          line:   endPosDetails.line,\n          column: endPosDetails.column\n        }\n      };\n    }\n\n    function peg$fail(expected) {\n      if (peg$currPos < peg$maxFailPos) { return; }\n\n      if (peg$currPos > peg$maxFailPos) {\n        peg$maxFailPos = peg$currPos;\n        peg$maxFailExpected = [];\n      }\n\n      peg$maxFailExpected.push(expected);\n    }\n\n    function peg$buildSimpleError(message, location) {\n      return new peg$SyntaxError(message, null, null, location);\n    }\n\n    function peg$buildStructuredError(expected, found, location) {\n      return new peg$SyntaxError(\n        peg$SyntaxError.buildMessage(expected, found),\n        expected,\n        found,\n        location\n      );\n    }\n\n    function peg$parseStart() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;\n\n      s0 = peg$currPos;\n      s1 = peg$parse__();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$currPos;\n        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c0) {\n          s3 = input.substr(peg$currPos, 7);\n          peg$currPos += 7;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c1); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse_();\n          if (s4 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 5).toLowerCase() === peg$c2) {\n              s5 = input.substr(peg$currPos, 5);\n              peg$currPos += 5;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c3); }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseComment();\n              if (s6 === peg$FAILED) {\n                s6 = null;\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse__();\n                if (s7 !== peg$FAILED) {\n                  s8 = [];\n                  s9 = peg$currPos;\n                  s10 = peg$parseDataLine();\n                  if (s10 !== peg$FAILED) {\n                    peg$savedPos = s9;\n                    s10 = peg$c4(s10);\n                  }\n                  s9 = s10;\n                  while (s9 !== peg$FAILED) {\n                    s8.push(s9);\n                    s9 = peg$currPos;\n                    s10 = peg$parseDataLine();\n                    if (s10 !== peg$FAILED) {\n                      peg$savedPos = s9;\n                      s10 = peg$c4(s10);\n                    }\n                    s9 = s10;\n                  }\n                  if (s8 !== peg$FAILED) {\n                    peg$savedPos = s2;\n                    s3 = peg$c5(s8);\n                    s2 = s3;\n                  } else {\n                    peg$currPos = s2;\n                    s2 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s2;\n                  s2 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s2;\n                s2 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n        if (s2 === peg$FAILED) {\n          s2 = null;\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parse__();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$currPos;\n            if (input.substr(peg$currPos, 7).toLowerCase() === peg$c0) {\n              s5 = input.substr(peg$currPos, 7);\n              peg$currPos += 7;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c1); }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_();\n              if (s6 !== peg$FAILED) {\n                if (input.substr(peg$currPos, 5).toLowerCase() === peg$c6) {\n                  s7 = input.substr(peg$currPos, 5);\n                  peg$currPos += 5;\n                } else {\n                  s7 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c7); }\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseComment();\n                  if (s8 === peg$FAILED) {\n                    s8 = null;\n                  }\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parse__();\n                    if (s9 !== peg$FAILED) {\n                      s10 = [];\n                      s11 = peg$currPos;\n                      s12 = peg$parseTextLine();\n                      if (s12 !== peg$FAILED) {\n                        peg$savedPos = s11;\n                        s12 = peg$c8(s2, s12);\n                      }\n                      s11 = s12;\n                      while (s11 !== peg$FAILED) {\n                        s10.push(s11);\n                        s11 = peg$currPos;\n                        s12 = peg$parseTextLine();\n                        if (s12 !== peg$FAILED) {\n                          peg$savedPos = s11;\n                          s12 = peg$c8(s2, s12);\n                        }\n                        s11 = s12;\n                      }\n                      if (s10 !== peg$FAILED) {\n                        peg$savedPos = s4;\n                        s5 = peg$c9(s2, s10);\n                        s4 = s5;\n                      } else {\n                        peg$currPos = s4;\n                        s4 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s4;\n                      s4 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s4;\n                    s4 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s4;\n                  s4 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n            if (s4 === peg$FAILED) {\n              s4 = null;\n            }\n            if (s4 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c10(s2, s4);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseEmptyLine() {\n      var s0;\n\n      s0 = peg$parseComment();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parse_();\n      }\n\n      return s0;\n    }\n\n    function peg$parseComment() {\n      var s0, s1, s2, s3, s4;\n\n      s0 = peg$currPos;\n      s1 = peg$parse_();\n      if (s1 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 59) {\n          s2 = peg$c11;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c12); }\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = [];\n          if (peg$c13.test(input.charAt(peg$currPos))) {\n            s4 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c14); }\n          }\n          while (s4 !== peg$FAILED) {\n            s3.push(s4);\n            if (peg$c13.test(input.charAt(peg$currPos))) {\n              s4 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c14); }\n            }\n          }\n          if (s3 !== peg$FAILED) {\n            s1 = [s1, s2, s3];\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseDataLine() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n      s0 = peg$currPos;\n      s1 = peg$parseLabel();\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseDataSize();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse_();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseDataConstant();\n              if (s5 !== peg$FAILED) {\n                s6 = [];\n                s7 = peg$currPos;\n                s8 = peg$parse_();\n                if (s8 !== peg$FAILED) {\n                  if (input.charCodeAt(peg$currPos) === 44) {\n                    s9 = peg$c15;\n                    peg$currPos++;\n                  } else {\n                    s9 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c16); }\n                  }\n                  if (s9 !== peg$FAILED) {\n                    s10 = peg$parse_();\n                    if (s10 !== peg$FAILED) {\n                      s11 = peg$parseDataConstant();\n                      if (s11 !== peg$FAILED) {\n                        peg$savedPos = s7;\n                        s8 = peg$c17(s1, s3, s5, s11);\n                        s7 = s8;\n                      } else {\n                        peg$currPos = s7;\n                        s7 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s7;\n                      s7 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s7;\n                    s7 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s7;\n                  s7 = peg$FAILED;\n                }\n                while (s7 !== peg$FAILED) {\n                  s6.push(s7);\n                  s7 = peg$currPos;\n                  s8 = peg$parse_();\n                  if (s8 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 44) {\n                      s9 = peg$c15;\n                      peg$currPos++;\n                    } else {\n                      s9 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c16); }\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse_();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseDataConstant();\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s7;\n                          s8 = peg$c17(s1, s3, s5, s11);\n                          s7 = s8;\n                        } else {\n                          peg$currPos = s7;\n                          s7 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s7;\n                        s7 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s7;\n                      s7 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s7;\n                    s7 = peg$FAILED;\n                  }\n                }\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseComment();\n                  if (s7 === peg$FAILED) {\n                    s7 = null;\n                  }\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c18(s1, s3, s5, s6);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseLabel();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parseComment();\n          if (s2 === peg$FAILED) {\n            s2 = null;\n          }\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parse__();\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c19(s1);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseDataConstant() {\n      var s0;\n\n      s0 = peg$parseNumber();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseString();\n      }\n\n      return s0;\n    }\n\n    function peg$parseDataSize() {\n      var s0, s1;\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c20) {\n        s1 = input.substr(peg$currPos, 2);\n        peg$currPos += 2;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c21); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c22();\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 2).toLowerCase() === peg$c23) {\n          s1 = input.substr(peg$currPos, 2);\n          peg$currPos += 2;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c24); }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c25();\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 2).toLowerCase() === peg$c26) {\n            s1 = input.substr(peg$currPos, 2);\n            peg$currPos += 2;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c27); }\n          }\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c28();\n          }\n          s0 = s1;\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseTextLine() {\n      var s0, s1, s2, s3, s4, s5, s6;\n\n      s0 = peg$currPos;\n      s1 = peg$parse_();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseLabel();\n        if (s2 === peg$FAILED) {\n          s2 = null;\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parse_();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseInstruction();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseComment();\n              if (s5 === peg$FAILED) {\n                s5 = null;\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c29(s2, s4);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parse_();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parseLabel();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseComment();\n            if (s3 === peg$FAILED) {\n              s3 = null;\n            }\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c30(s2);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseLabel() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 46) {\n        s1 = peg$c31;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c32); }\n      }\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseIdentifier();\n        if (s2 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 58) {\n            s3 = peg$c33;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c34); }\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c35(s1, s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseInstruction() {\n      var s0;\n\n      s0 = peg$parseNoOperandInstruction();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseJumpInstruction();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseSingleOperandInstruction();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseMemoryInstruction();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parseArithmeticInstruction();\n              if (s0 === peg$FAILED) {\n                s0 = peg$parseCompareInstruction();\n              }\n            }\n          }\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseNoOperandInstruction() {\n      var s0, s1;\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c36) {\n        s1 = input.substr(peg$currPos, 3);\n        peg$currPos += 3;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c37); }\n      }\n      if (s1 === peg$FAILED) {\n        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c38) {\n          s1 = input.substr(peg$currPos, 3);\n          peg$currPos += 3;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c39); }\n        }\n        if (s1 === peg$FAILED) {\n          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c40) {\n            s1 = input.substr(peg$currPos, 3);\n            peg$currPos += 3;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c41); }\n          }\n          if (s1 === peg$FAILED) {\n            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c42) {\n              s1 = input.substr(peg$currPos, 3);\n              peg$currPos += 3;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c43); }\n            }\n            if (s1 === peg$FAILED) {\n              if (input.substr(peg$currPos, 5).toLowerCase() === peg$c44) {\n                s1 = input.substr(peg$currPos, 5);\n                peg$currPos += 5;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c45); }\n              }\n              if (s1 === peg$FAILED) {\n                if (input.substr(peg$currPos, 3).toLowerCase() === peg$c46) {\n                  s1 = input.substr(peg$currPos, 3);\n                  peg$currPos += 3;\n                } else {\n                  s1 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c47); }\n                }\n                if (s1 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 5).toLowerCase() === peg$c48) {\n                    s1 = input.substr(peg$currPos, 5);\n                    peg$currPos += 5;\n                  } else {\n                    s1 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c49); }\n                  }\n                  if (s1 === peg$FAILED) {\n                    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c50) {\n                      s1 = input.substr(peg$currPos, 3);\n                      peg$currPos += 3;\n                    } else {\n                      s1 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c51); }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c52();\n      }\n      s0 = s1;\n\n      return s0;\n    }\n\n    function peg$parseJumpInstruction() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c53) {\n        s2 = input.substr(peg$currPos, 3);\n        peg$currPos += 3;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c54); }\n      }\n      if (s2 === peg$FAILED) {\n        if (input.substr(peg$currPos, 2).toLowerCase() === peg$c55) {\n          s2 = input.substr(peg$currPos, 2);\n          peg$currPos += 2;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c56); }\n        }\n        if (s2 === peg$FAILED) {\n          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c57) {\n            s2 = input.substr(peg$currPos, 3);\n            peg$currPos += 3;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c58); }\n          }\n          if (s2 === peg$FAILED) {\n            if (input.substr(peg$currPos, 2).toLowerCase() === peg$c59) {\n              s2 = input.substr(peg$currPos, 2);\n              peg$currPos += 2;\n            } else {\n              s2 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c60); }\n            }\n            if (s2 === peg$FAILED) {\n              if (input.substr(peg$currPos, 3).toLowerCase() === peg$c61) {\n                s2 = input.substr(peg$currPos, 3);\n                peg$currPos += 3;\n              } else {\n                s2 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c62); }\n              }\n              if (s2 === peg$FAILED) {\n                if (input.substr(peg$currPos, 2).toLowerCase() === peg$c63) {\n                  s2 = input.substr(peg$currPos, 2);\n                  peg$currPos += 2;\n                } else {\n                  s2 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c64); }\n                }\n                if (s2 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 4).toLowerCase() === peg$c65) {\n                    s2 = input.substr(peg$currPos, 4);\n                    peg$currPos += 4;\n                  } else {\n                    s2 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c66); }\n                  }\n                  if (s2 === peg$FAILED) {\n                    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c67) {\n                      s2 = input.substr(peg$currPos, 2);\n                      peg$currPos += 2;\n                    } else {\n                      s2 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c68); }\n                    }\n                    if (s2 === peg$FAILED) {\n                      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c69) {\n                        s2 = input.substr(peg$currPos, 3);\n                        peg$currPos += 3;\n                      } else {\n                        s2 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c70); }\n                      }\n                      if (s2 === peg$FAILED) {\n                        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c71) {\n                          s2 = input.substr(peg$currPos, 3);\n                          peg$currPos += 3;\n                        } else {\n                          s2 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c72); }\n                        }\n                        if (s2 === peg$FAILED) {\n                          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c73) {\n                            s2 = input.substr(peg$currPos, 3);\n                            peg$currPos += 3;\n                          } else {\n                            s2 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c74); }\n                          }\n                          if (s2 === peg$FAILED) {\n                            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c75) {\n                              s2 = input.substr(peg$currPos, 3);\n                              peg$currPos += 3;\n                            } else {\n                              s2 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c76); }\n                            }\n                            if (s2 === peg$FAILED) {\n                              if (input.substr(peg$currPos, 3).toLowerCase() === peg$c77) {\n                                s2 = input.substr(peg$currPos, 3);\n                                peg$currPos += 3;\n                              } else {\n                                s2 = peg$FAILED;\n                                if (peg$silentFails === 0) { peg$fail(peg$c78); }\n                              }\n                              if (s2 === peg$FAILED) {\n                                if (input.substr(peg$currPos, 2).toLowerCase() === peg$c79) {\n                                  s2 = input.substr(peg$currPos, 2);\n                                  peg$currPos += 2;\n                                } else {\n                                  s2 = peg$FAILED;\n                                  if (peg$silentFails === 0) { peg$fail(peg$c80); }\n                                }\n                                if (s2 === peg$FAILED) {\n                                  if (input.substr(peg$currPos, 4).toLowerCase() === peg$c81) {\n                                    s2 = input.substr(peg$currPos, 4);\n                                    peg$currPos += 4;\n                                  } else {\n                                    s2 = peg$FAILED;\n                                    if (peg$silentFails === 0) { peg$fail(peg$c82); }\n                                  }\n                                  if (s2 === peg$FAILED) {\n                                    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c83) {\n                                      s2 = input.substr(peg$currPos, 2);\n                                      peg$currPos += 2;\n                                    } else {\n                                      s2 = peg$FAILED;\n                                      if (peg$silentFails === 0) { peg$fail(peg$c84); }\n                                    }\n                                    if (s2 === peg$FAILED) {\n                                      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c85) {\n                                        s2 = input.substr(peg$currPos, 4);\n                                        peg$currPos += 4;\n                                      } else {\n                                        s2 = peg$FAILED;\n                                        if (peg$silentFails === 0) { peg$fail(peg$c86); }\n                                      }\n                                      if (s2 === peg$FAILED) {\n                                        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c87) {\n                                          s2 = input.substr(peg$currPos, 3);\n                                          peg$currPos += 3;\n                                        } else {\n                                          s2 = peg$FAILED;\n                                          if (peg$silentFails === 0) { peg$fail(peg$c88); }\n                                        }\n                                        if (s2 === peg$FAILED) {\n                                          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c89) {\n                                            s2 = input.substr(peg$currPos, 3);\n                                            peg$currPos += 3;\n                                          } else {\n                                            s2 = peg$FAILED;\n                                            if (peg$silentFails === 0) { peg$fail(peg$c90); }\n                                          }\n                                          if (s2 === peg$FAILED) {\n                                            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c91) {\n                                              s2 = input.substr(peg$currPos, 3);\n                                              peg$currPos += 3;\n                                            } else {\n                                              s2 = peg$FAILED;\n                                              if (peg$silentFails === 0) { peg$fail(peg$c92); }\n                                            }\n                                            if (s2 === peg$FAILED) {\n                                              if (input.substr(peg$currPos, 3).toLowerCase() === peg$c93) {\n                                                s2 = input.substr(peg$currPos, 3);\n                                                peg$currPos += 3;\n                                              } else {\n                                                s2 = peg$FAILED;\n                                                if (peg$silentFails === 0) { peg$fail(peg$c94); }\n                                              }\n                                              if (s2 === peg$FAILED) {\n                                                if (input.substr(peg$currPos, 2).toLowerCase() === peg$c95) {\n                                                  s2 = input.substr(peg$currPos, 2);\n                                                  peg$currPos += 2;\n                                                } else {\n                                                  s2 = peg$FAILED;\n                                                  if (peg$silentFails === 0) { peg$fail(peg$c96); }\n                                                }\n                                                if (s2 === peg$FAILED) {\n                                                  if (input.substr(peg$currPos, 4).toLowerCase() === peg$c97) {\n                                                    s2 = input.substr(peg$currPos, 4);\n                                                    peg$currPos += 4;\n                                                  } else {\n                                                    s2 = peg$FAILED;\n                                                    if (peg$silentFails === 0) { peg$fail(peg$c98); }\n                                                  }\n                                                  if (s2 === peg$FAILED) {\n                                                    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c99) {\n                                                      s2 = input.substr(peg$currPos, 4);\n                                                      peg$currPos += 4;\n                                                    } else {\n                                                      s2 = peg$FAILED;\n                                                      if (peg$silentFails === 0) { peg$fail(peg$c100); }\n                                                    }\n                                                    if (s2 === peg$FAILED) {\n                                                      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c101) {\n                                                        s2 = input.substr(peg$currPos, 5);\n                                                        peg$currPos += 5;\n                                                      } else {\n                                                        s2 = peg$FAILED;\n                                                        if (peg$silentFails === 0) { peg$fail(peg$c102); }\n                                                      }\n                                                      if (s2 === peg$FAILED) {\n                                                        if (input.substr(peg$currPos, 2).toLowerCase() === peg$c103) {\n                                                          s2 = input.substr(peg$currPos, 2);\n                                                          peg$currPos += 2;\n                                                        } else {\n                                                          s2 = peg$FAILED;\n                                                          if (peg$silentFails === 0) { peg$fail(peg$c104); }\n                                                        }\n                                                        if (s2 === peg$FAILED) {\n                                                          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c105) {\n                                                            s2 = input.substr(peg$currPos, 3);\n                                                            peg$currPos += 3;\n                                                          } else {\n                                                            s2 = peg$FAILED;\n                                                            if (peg$silentFails === 0) { peg$fail(peg$c106); }\n                                                          }\n                                                          if (s2 === peg$FAILED) {\n                                                            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c107) {\n                                                              s2 = input.substr(peg$currPos, 3);\n                                                              peg$currPos += 3;\n                                                            } else {\n                                                              s2 = peg$FAILED;\n                                                              if (peg$silentFails === 0) { peg$fail(peg$c108); }\n                                                            }\n                                                            if (s2 === peg$FAILED) {\n                                                              if (input.substr(peg$currPos, 3).toLowerCase() === peg$c109) {\n                                                                s2 = input.substr(peg$currPos, 3);\n                                                                peg$currPos += 3;\n                                                              } else {\n                                                                s2 = peg$FAILED;\n                                                                if (peg$silentFails === 0) { peg$fail(peg$c110); }\n                                                              }\n                                                              if (s2 === peg$FAILED) {\n                                                                if (input.substr(peg$currPos, 2).toLowerCase() === peg$c111) {\n                                                                  s2 = input.substr(peg$currPos, 2);\n                                                                  peg$currPos += 2;\n                                                                } else {\n                                                                  s2 = peg$FAILED;\n                                                                  if (peg$silentFails === 0) { peg$fail(peg$c112); }\n                                                                }\n                                                                if (s2 === peg$FAILED) {\n                                                                  if (input.substr(peg$currPos, 3).toLowerCase() === peg$c113) {\n                                                                    s2 = input.substr(peg$currPos, 3);\n                                                                    peg$currPos += 3;\n                                                                  } else {\n                                                                    s2 = peg$FAILED;\n                                                                    if (peg$silentFails === 0) { peg$fail(peg$c114); }\n                                                                  }\n                                                                  if (s2 === peg$FAILED) {\n                                                                    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c115) {\n                                                                      s2 = input.substr(peg$currPos, 2);\n                                                                      peg$currPos += 2;\n                                                                    } else {\n                                                                      s2 = peg$FAILED;\n                                                                      if (peg$silentFails === 0) { peg$fail(peg$c116); }\n                                                                    }\n                                                                    if (s2 === peg$FAILED) {\n                                                                      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c117) {\n                                                                        s2 = input.substr(peg$currPos, 3);\n                                                                        peg$currPos += 3;\n                                                                      } else {\n                                                                        s2 = peg$FAILED;\n                                                                        if (peg$silentFails === 0) { peg$fail(peg$c118); }\n                                                                      }\n                                                                      if (s2 === peg$FAILED) {\n                                                                        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c119) {\n                                                                          s2 = input.substr(peg$currPos, 4);\n                                                                          peg$currPos += 4;\n                                                                        } else {\n                                                                          s2 = peg$FAILED;\n                                                                          if (peg$silentFails === 0) { peg$fail(peg$c120); }\n                                                                        }\n                                                                        if (s2 === peg$FAILED) {\n                                                                          if (input.substr(peg$currPos, 4).toLowerCase() === peg$c121) {\n                                                                            s2 = input.substr(peg$currPos, 4);\n                                                                            peg$currPos += 4;\n                                                                          } else {\n                                                                            s2 = peg$FAILED;\n                                                                            if (peg$silentFails === 0) { peg$fail(peg$c122); }\n                                                                          }\n                                                                        }\n                                                                      }\n                                                                    }\n                                                                  }\n                                                                }\n                                                              }\n                                                            }\n                                                          }\n                                                        }\n                                                      }\n                                                    }\n                                                  }\n                                                }\n                                              }\n                                            }\n                                          }\n                                        }\n                                      }\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = input.substring(s1, peg$currPos);\n      } else {\n        s1 = s2;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseReadableExpression();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c123(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseSingleOperandInstruction() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c124) {\n        s2 = input.substr(peg$currPos, 3);\n        peg$currPos += 3;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c125); }\n      }\n      if (s2 === peg$FAILED) {\n        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c126) {\n          s2 = input.substr(peg$currPos, 3);\n          peg$currPos += 3;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c127); }\n        }\n        if (s2 === peg$FAILED) {\n          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c128) {\n            s2 = input.substr(peg$currPos, 3);\n            peg$currPos += 3;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c129); }\n          }\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = input.substring(s1, peg$currPos);\n      } else {\n        s1 = s2;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseWritableExpression();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c130(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$currPos;\n        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c131) {\n          s2 = input.substr(peg$currPos, 4);\n          peg$currPos += 4;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c132); }\n        }\n        if (s2 === peg$FAILED) {\n          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c133) {\n            s2 = input.substr(peg$currPos, 3);\n            peg$currPos += 3;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c134); }\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          s1 = input.substring(s1, peg$currPos);\n        } else {\n          s1 = s2;\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse_();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseReadableExpression();\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c130(s1, s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseMemoryInstruction() {\n      var s0, s1, s2, s3, s4, s5, s6, s7;\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c135) {\n        s2 = input.substr(peg$currPos, 3);\n        peg$currPos += 3;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c136); }\n      }\n      if (s2 === peg$FAILED) {\n        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c137) {\n          s2 = input.substr(peg$currPos, 5);\n          peg$currPos += 5;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c138); }\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = input.substring(s1, peg$currPos);\n      } else {\n        s1 = s2;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseWritableExpression();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse_();\n            if (s4 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 44) {\n                s5 = peg$c15;\n                peg$currPos++;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c16); }\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse_();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseReadableExpression();\n                  if (s7 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c139(s1, s3, s7);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseArithmeticInstruction() {\n      var s0, s1, s2, s3, s4, s5, s6;\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c140) {\n        s2 = input.substr(peg$currPos, 3);\n        peg$currPos += 3;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c141); }\n      }\n      if (s2 === peg$FAILED) {\n        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c142) {\n          s2 = input.substr(peg$currPos, 3);\n          peg$currPos += 3;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c143); }\n        }\n        if (s2 === peg$FAILED) {\n          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c144) {\n            s2 = input.substr(peg$currPos, 3);\n            peg$currPos += 3;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c145); }\n          }\n          if (s2 === peg$FAILED) {\n            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c146) {\n              s2 = input.substr(peg$currPos, 3);\n              peg$currPos += 3;\n            } else {\n              s2 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c147); }\n            }\n          }\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = input.substring(s1, peg$currPos);\n      } else {\n        s1 = s2;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseWritableExpression();\n          if (s3 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 44) {\n              s4 = peg$c15;\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c16); }\n            }\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parse_();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parseReadableExpression();\n                if (s6 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c148(s1, s3, s6);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$currPos;\n        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c149) {\n          s2 = input.substr(peg$currPos, 3);\n          peg$currPos += 3;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c150); }\n        }\n        if (s2 === peg$FAILED) {\n          if (input.substr(peg$currPos, 4).toLowerCase() === peg$c151) {\n            s2 = input.substr(peg$currPos, 4);\n            peg$currPos += 4;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c152); }\n          }\n          if (s2 === peg$FAILED) {\n            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c153) {\n              s2 = input.substr(peg$currPos, 3);\n              peg$currPos += 3;\n            } else {\n              s2 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c154); }\n            }\n            if (s2 === peg$FAILED) {\n              if (input.substr(peg$currPos, 4).toLowerCase() === peg$c155) {\n                s2 = input.substr(peg$currPos, 4);\n                peg$currPos += 4;\n              } else {\n                s2 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c156); }\n              }\n            }\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          s1 = input.substring(s1, peg$currPos);\n        } else {\n          s1 = s2;\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse_();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseReadableExpression();\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c157(s1, s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseCompareInstruction() {\n      var s0, s1, s2, s3, s4, s5, s6, s7;\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c158) {\n        s2 = input.substr(peg$currPos, 3);\n        peg$currPos += 3;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c159); }\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = input.substring(s1, peg$currPos);\n      } else {\n        s1 = s2;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseReadableExpression();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse_();\n            if (s4 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 44) {\n                s5 = peg$c15;\n                peg$currPos++;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c16); }\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse_();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseReadableExpression();\n                  if (s7 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c160(s1, s3, s7);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseWritableExpression() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$parseRegister();\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseSizeCast();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse_();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseRegisterDereferenceExpression();\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c161(s1, s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseSizeCast();\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse_();\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parseAddressDereferenceExpression();\n              if (s3 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c161(s1, s3);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseReadableExpression() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$parseRegister();\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseSizeCast();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse_();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseRegisterDereferenceExpression();\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c161(s1, s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseSizeCast();\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse_();\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parseAddressDereferenceExpression();\n              if (s3 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c161(s1, s3);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            s1 = peg$parseSizeCast();\n            if (s1 !== peg$FAILED) {\n              s2 = peg$parse_();\n              if (s2 !== peg$FAILED) {\n                s3 = peg$parseLabelExpression();\n                if (s3 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c161(s1, s3);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n              s1 = peg$parseSizeCast();\n              if (s1 !== peg$FAILED) {\n                s2 = peg$parse_();\n                if (s2 !== peg$FAILED) {\n                  s3 = peg$parseNumber();\n                  if (s3 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c161(s1, s3);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            }\n          }\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseAddressDereferenceExpression() {\n      var s0, s1, s2, s3, s4, s5, s6, s7;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 91) {\n        s1 = peg$c162;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c163); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseLabelExpression();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse_();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseIndexExpression();\n              if (s5 === peg$FAILED) {\n                s5 = null;\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse_();\n                if (s6 !== peg$FAILED) {\n                  if (input.charCodeAt(peg$currPos) === 93) {\n                    s7 = peg$c164;\n                    peg$currPos++;\n                  } else {\n                    s7 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c165); }\n                  }\n                  if (s7 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c166(s3, s5);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 91) {\n          s1 = peg$c162;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c163); }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse_();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseNumber();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse_();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseIndexExpression();\n                if (s5 === peg$FAILED) {\n                  s5 = null;\n                }\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse_();\n                  if (s6 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 93) {\n                      s7 = peg$c164;\n                      peg$currPos++;\n                    } else {\n                      s7 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c165); }\n                    }\n                    if (s7 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c167(s3, s5);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseLabelExpression() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 46) {\n        s1 = peg$c31;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c32); }\n      }\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseIdentifier();\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c168(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseRegisterDereferenceExpression() {\n      var s0, s1, s2, s3, s4, s5, s6, s7;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 91) {\n        s1 = peg$c162;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c163); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseRegister();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse_();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseIndexExpression();\n              if (s5 === peg$FAILED) {\n                s5 = null;\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse_();\n                if (s6 !== peg$FAILED) {\n                  if (input.charCodeAt(peg$currPos) === 93) {\n                    s7 = peg$c164;\n                    peg$currPos++;\n                  } else {\n                    s7 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c165); }\n                  }\n                  if (s7 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c169(s3, s5);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseIndexExpression() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 43) {\n        s2 = peg$c170;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c171); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse_();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseRegister();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse_();\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 42) {\n                s6 = peg$c172;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c173); }\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse_();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseNumber();\n                  if (s8 !== peg$FAILED) {\n                    peg$savedPos = s1;\n                    s2 = peg$c174(s4, s8);\n                    s1 = s2;\n                  } else {\n                    peg$currPos = s1;\n                    s1 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s1;\n                  s1 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          s4 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 43) {\n            s5 = peg$c170;\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c171); }\n          }\n          if (s5 === peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 45) {\n              s5 = peg$c175;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c176); }\n            }\n          }\n          if (s5 !== peg$FAILED) {\n            s4 = input.substring(s4, peg$currPos);\n          } else {\n            s4 = s5;\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse_();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseNumber();\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s3;\n                s4 = peg$c177(s1, s4, s6);\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c178(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseRegister() {\n      var s0, s1;\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c179) {\n        s1 = input.substr(peg$currPos, 3);\n        peg$currPos += 3;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c180); }\n      }\n      if (s1 === peg$FAILED) {\n        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c181) {\n          s1 = input.substr(peg$currPos, 3);\n          peg$currPos += 3;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c182); }\n        }\n        if (s1 === peg$FAILED) {\n          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c183) {\n            s1 = input.substr(peg$currPos, 3);\n            peg$currPos += 3;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c184); }\n          }\n          if (s1 === peg$FAILED) {\n            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c185) {\n              s1 = input.substr(peg$currPos, 3);\n              peg$currPos += 3;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c186); }\n            }\n            if (s1 === peg$FAILED) {\n              if (input.substr(peg$currPos, 3).toLowerCase() === peg$c187) {\n                s1 = input.substr(peg$currPos, 3);\n                peg$currPos += 3;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c188); }\n              }\n              if (s1 === peg$FAILED) {\n                if (input.substr(peg$currPos, 3).toLowerCase() === peg$c189) {\n                  s1 = input.substr(peg$currPos, 3);\n                  peg$currPos += 3;\n                } else {\n                  s1 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c190); }\n                }\n                if (s1 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 3).toLowerCase() === peg$c191) {\n                    s1 = input.substr(peg$currPos, 3);\n                    peg$currPos += 3;\n                  } else {\n                    s1 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c192); }\n                  }\n                  if (s1 === peg$FAILED) {\n                    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c193) {\n                      s1 = input.substr(peg$currPos, 3);\n                      peg$currPos += 3;\n                    } else {\n                      s1 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c194); }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c195();\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 2).toLowerCase() === peg$c196) {\n          s1 = input.substr(peg$currPos, 2);\n          peg$currPos += 2;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c197); }\n        }\n        if (s1 === peg$FAILED) {\n          if (input.substr(peg$currPos, 2).toLowerCase() === peg$c198) {\n            s1 = input.substr(peg$currPos, 2);\n            peg$currPos += 2;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c199); }\n          }\n          if (s1 === peg$FAILED) {\n            if (input.substr(peg$currPos, 2).toLowerCase() === peg$c200) {\n              s1 = input.substr(peg$currPos, 2);\n              peg$currPos += 2;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c201); }\n            }\n            if (s1 === peg$FAILED) {\n              if (input.substr(peg$currPos, 2).toLowerCase() === peg$c202) {\n                s1 = input.substr(peg$currPos, 2);\n                peg$currPos += 2;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c203); }\n              }\n            }\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c204();\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 2).toLowerCase() === peg$c205) {\n            s1 = input.substr(peg$currPos, 2);\n            peg$currPos += 2;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c206); }\n          }\n          if (s1 === peg$FAILED) {\n            if (input.substr(peg$currPos, 2).toLowerCase() === peg$c207) {\n              s1 = input.substr(peg$currPos, 2);\n              peg$currPos += 2;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c208); }\n            }\n            if (s1 === peg$FAILED) {\n              if (input.substr(peg$currPos, 2).toLowerCase() === peg$c209) {\n                s1 = input.substr(peg$currPos, 2);\n                peg$currPos += 2;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c210); }\n              }\n              if (s1 === peg$FAILED) {\n                if (input.substr(peg$currPos, 2).toLowerCase() === peg$c211) {\n                  s1 = input.substr(peg$currPos, 2);\n                  peg$currPos += 2;\n                } else {\n                  s1 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c212); }\n                }\n                if (s1 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 2).toLowerCase() === peg$c213) {\n                    s1 = input.substr(peg$currPos, 2);\n                    peg$currPos += 2;\n                  } else {\n                    s1 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c214); }\n                  }\n                  if (s1 === peg$FAILED) {\n                    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c215) {\n                      s1 = input.substr(peg$currPos, 2);\n                      peg$currPos += 2;\n                    } else {\n                      s1 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c216); }\n                    }\n                    if (s1 === peg$FAILED) {\n                      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c217) {\n                        s1 = input.substr(peg$currPos, 2);\n                        peg$currPos += 2;\n                      } else {\n                        s1 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c218); }\n                      }\n                      if (s1 === peg$FAILED) {\n                        if (input.substr(peg$currPos, 2).toLowerCase() === peg$c219) {\n                          s1 = input.substr(peg$currPos, 2);\n                          peg$currPos += 2;\n                        } else {\n                          s1 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c220); }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c221();\n          }\n          s0 = s1;\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseSizeCast() {\n      var s0, s1;\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c222) {\n        s1 = input.substr(peg$currPos, 4);\n        peg$currPos += 4;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c223); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c22();\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c224) {\n          s1 = input.substr(peg$currPos, 4);\n          peg$currPos += 4;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c225); }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c25();\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 5).toLowerCase() === peg$c226) {\n            s1 = input.substr(peg$currPos, 5);\n            peg$currPos += 5;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c227); }\n          }\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c28();\n          }\n          s0 = s1;\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            s1 = peg$c228;\n            if (s1 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c229();\n            }\n            s0 = s1;\n          }\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseIdentifier() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      if (peg$c230.test(input.charAt(peg$currPos))) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c231); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        if (peg$c232.test(input.charAt(peg$currPos))) {\n          s3 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c233); }\n        }\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c232.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c233); }\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c234();\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseNumber() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 2) === peg$c235) {\n        s1 = peg$c235;\n        peg$currPos += 2;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c236); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        if (peg$c237.test(input.charAt(peg$currPos))) {\n          s3 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c238); }\n        }\n        if (s3 !== peg$FAILED) {\n          while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            if (peg$c237.test(input.charAt(peg$currPos))) {\n              s3 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c238); }\n            }\n          }\n        } else {\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c239();\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = [];\n        if (peg$c240.test(input.charAt(peg$currPos))) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c241); }\n        }\n        if (s2 !== peg$FAILED) {\n          while (s2 !== peg$FAILED) {\n            s1.push(s2);\n            if (peg$c240.test(input.charAt(peg$currPos))) {\n              s2 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s2 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c241); }\n            }\n          }\n        } else {\n          s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c242();\n        }\n        s0 = s1;\n      }\n\n      return s0;\n    }\n\n    function peg$parseString() {\n      var s0, s1, s2, s3, s4;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 39) {\n        s1 = peg$c243;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c244); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$currPos;\n        if (input.substr(peg$currPos, 2) === peg$c245) {\n          s4 = peg$c245;\n          peg$currPos += 2;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c246); }\n        }\n        if (s4 !== peg$FAILED) {\n          peg$savedPos = s3;\n          s4 = peg$c247();\n        }\n        s3 = s4;\n        if (s3 === peg$FAILED) {\n          if (peg$c248.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c249); }\n          }\n        }\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          if (input.substr(peg$currPos, 2) === peg$c245) {\n            s4 = peg$c245;\n            peg$currPos += 2;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c246); }\n          }\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s3;\n            s4 = peg$c247();\n          }\n          s3 = s4;\n          if (s3 === peg$FAILED) {\n            if (peg$c248.test(input.charAt(peg$currPos))) {\n              s3 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c249); }\n            }\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 39) {\n            s3 = peg$c243;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c244); }\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c250(s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parse_() {\n      var s0, s1;\n\n      peg$silentFails++;\n      s0 = [];\n      if (peg$c252.test(input.charAt(peg$currPos))) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c253); }\n      }\n      while (s1 !== peg$FAILED) {\n        s0.push(s1);\n        if (peg$c252.test(input.charAt(peg$currPos))) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c253); }\n        }\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c251); }\n      }\n\n      return s0;\n    }\n\n    function peg$parse__() {\n      var s0, s1;\n\n      peg$silentFails++;\n      s0 = [];\n      if (peg$c255.test(input.charAt(peg$currPos))) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c256); }\n      }\n      while (s1 !== peg$FAILED) {\n        s0.push(s1);\n        if (peg$c255.test(input.charAt(peg$currPos))) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c256); }\n        }\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c254); }\n      }\n\n      return s0;\n    }\n\n    peg$result = peg$startRuleFunction();\n\n    if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n      return peg$result;\n    } else {\n      if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n        peg$fail(peg$endExpectation());\n      }\n\n      throw peg$buildStructuredError(\n        peg$maxFailExpected,\n        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n        peg$maxFailPos < input.length\n          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\n          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n      );\n    }\n  }\n\n  return {\n    SyntaxError: peg$SyntaxError,\n    parse:       peg$parse\n  };\n})();\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/assembly/asm-parser.peg\n// module id = ./src/app/assembly/asm-parser.peg\n// module chunks = 1","import * as _ from \"lodash\";\r\nimport {LineMap, Program} from \"./program\";\r\nimport {EncodedInstruction} from \"./encoding\";\r\nimport {Move} from \"../emulation/instruction/mov\";\r\nimport {Instruction} from \"../emulation/instruction/instruction\";\r\nimport {\r\n    Parameter, RegisterParameter, MemoryParameter, LabelParameter, DerefLabelParameter, Indexer\r\n} from \"../emulation/instruction/parameter\";\r\nimport {REGISTER_INDEX} from \"../emulation/cpu\";\r\nimport {\r\n    Jump, JumpE, JumpGE, JumpLE, JumpG, JumpL, JumpO, JumpNO, JumpS, JumpNS,\r\n    JumpNE, JumpB, JumpAE, JumpBE, JumpA, JumpP, JumpNP, JumpCXZ, JumpECXZ, Loop, LoopE, LoopNE\r\n} from \"../emulation/instruction/jump\";\r\nimport {Interrupt} from \"../emulation/instruction/interrupt\";\r\nimport {Pop} from \"../emulation/instruction/pop\";\r\nimport {Push} from \"../emulation/instruction/push\";\r\nimport {Call, Return, Enter, Leave} from \"../emulation/instruction/retcall\";\r\nimport {Compare} from \"../emulation/instruction/cmp\";\r\nimport {\r\n    Add, AddWithCarry, Sub, SubWithBorrow, DivideSigned, MultiplySigned,\r\n    Decrement, Increment\r\n} from \"../emulation/instruction/arithmetic\";\r\nimport {And, Or, Xor} from \"../emulation/instruction/bitwise\";\r\nimport {LabelResolver} from \"./label\";\r\nimport {SetDirection, ClearDirection, SetCarry, ClearCarry} from \"../emulation/instruction/flags\";\r\nimport {Halt} from \"../emulation/instruction/halt\";\r\ndeclare var require: any;\r\nlet parser = require(\"./asm-parser.peg\");\r\n\r\nconst InstructionMapping = {\r\n    \"MOV\":      Move,\r\n    \"INT\":      Interrupt,\r\n    \"HLT\":      Halt,\r\n    \"POP\":      Pop,\r\n    \"PUSH\":     Push,\r\n    \"CALL\":     Call,\r\n    \"RET\":      Return,\r\n    \"ENTER\":    Enter,\r\n    \"LEAVE\":    Leave,\r\n    \"LOOP\":     Loop,\r\n    \"LOOPE\":    LoopE,\r\n    \"LOOPZ\":    LoopE,\r\n    \"LOOPNE\":   LoopNE,\r\n    \"LOOPNZ\":   LoopNE,\r\n    \"JMP\":      Jump,\r\n    \"CMP\":      Compare,\r\n    \"JO\":       JumpO,\r\n    \"JNO\":      JumpNO,\r\n    \"JS\":       JumpS,\r\n    \"JNS\":      JumpNS,\r\n    \"JE\":       JumpE,\r\n    \"JZ\":       JumpE,\r\n    \"JNE\":      JumpNE,\r\n    \"JNZ\":      JumpNE,\r\n    \"JB\":       JumpB,\r\n    \"JNAE\":     JumpB,\r\n    \"JC\":       JumpB,\r\n    \"JNB\":      JumpAE,\r\n    \"JAE\":      JumpAE,\r\n    \"JNC\":      JumpAE,\r\n    \"JBE\":      JumpBE,\r\n    \"JNA\":      JumpBE,\r\n    \"JA\":       JumpA,\r\n    \"JNBE\":     JumpA,\r\n    \"JL\":       JumpL,\r\n    \"JNGE\":     JumpL,\r\n    \"JGE\":      JumpGE,\r\n    \"JNL\":      JumpGE,\r\n    \"JLE\":      JumpLE,\r\n    \"JNG\":      JumpLE,\r\n    \"JG\":       JumpG,\r\n    \"JNLE\":     JumpG,\r\n    \"JP\":       JumpP,\r\n    \"JPE\":      JumpP,\r\n    \"JNP\":      JumpNP,\r\n    \"JPO\":      JumpNP,\r\n    \"JCXZ\":     JumpCXZ,\r\n    \"JECXZ\":    JumpECXZ,\r\n    \"ADD\":      Add,\r\n    \"ADC\":      AddWithCarry,\r\n    \"SUB\":      Sub,\r\n    \"SBB\":      SubWithBorrow,\r\n    \"IDIV\":     DivideSigned,\r\n    \"IMUL\":     MultiplySigned,\r\n    \"DEC\":      Decrement,\r\n    \"INC\":      Increment,\r\n    \"AND\":      And,\r\n    \"OR\":       Or,\r\n    \"XOR\":      Xor,\r\n    \"STD\":      SetDirection,\r\n    \"CLD\":      ClearDirection,\r\n    \"STC\":      SetCarry,\r\n    \"CLC\":      ClearCarry\r\n};\r\n\r\nexport class AssemblyException extends Error\r\n{\r\n    constructor(public message: string = \"\",\r\n                public line: number = 0,\r\n                public data: any = {})\r\n    {\r\n        super(message);\r\n    }\r\n}\r\n\r\nexport class MemoryDefinition\r\n{\r\n    constructor(private _address: number,\r\n                private _size: number,\r\n                private _value: any)\r\n    {\r\n\r\n    }\r\n\r\n    get address(): number\r\n    {\r\n        return this._address;\r\n    }\r\n    get size(): number\r\n    {\r\n        return this._size;\r\n    }\r\n    get value(): any\r\n    {\r\n        return this._value;\r\n    }\r\n}\r\n\r\nexport class Assembler\r\n{\r\n    assemble(program: string): Program\r\n    {\r\n        let parsedProgram: {text: any[], data: any[]};\r\n\r\n        try\r\n        {\r\n            parsedProgram = parser.parse(program);\r\n        }\r\n        catch (e)\r\n        {\r\n            throw new AssemblyException(e.message, e.location.start.line);\r\n        }\r\n\r\n        let assemblyData: AssemblyData = new AssemblyData();\r\n        let memoryDefinitions: MemoryDefinition[] = this.assembleDataSegment(parsedProgram.data, assemblyData);\r\n        let instructions: EncodedInstruction[] = this.assembleTextSegment(parsedProgram.text, assemblyData);\r\n\r\n        assemblyData.labelResolver.resolveAddresses();\r\n\r\n        return new Program(instructions, memoryDefinitions, assemblyData.lineMap);\r\n    }\r\n\r\n    private assembleDataSegment(dataLines: any[], assemblyData: AssemblyData): MemoryDefinition[]\r\n    {\r\n        let memoryDefinitions: MemoryDefinition[] = [];\r\n\r\n        for (let i = 0; i < dataLines.length; i++)\r\n        {\r\n            assemblyData.line = dataLines[i].location.start.line - 1;\r\n\r\n            try\r\n            {\r\n                memoryDefinitions = memoryDefinitions.concat(this.assembleMemoryDefinitions(dataLines[i].line, assemblyData));\r\n            }\r\n            catch (e)\r\n            {\r\n                if (e instanceof AssemblyException)\r\n                {\r\n                    throw new AssemblyException(e.message, assemblyData.line + 1, dataLines[i].line);\r\n                }\r\n                else\r\n                {\r\n                    throw e;\r\n                }\r\n            }\r\n        }\r\n\r\n        return memoryDefinitions;\r\n    }\r\n    private assembleMemoryDefinitions(line: any, assemblyData: AssemblyData): MemoryDefinition[]\r\n    {\r\n        if (line.label !== null)\r\n        {\r\n            this.assembleLabel(line.label, assemblyData, MemoryType.Data);\r\n        }\r\n\r\n\r\n        let definitions: MemoryDefinition[] = [];\r\n        let size: number = line.size;\r\n        if (size !== null)\r\n        {\r\n            for (let i = 0; i < line.constants.length; i++)\r\n            {\r\n                let constant = line.constants[i];\r\n\r\n                if (constant.tag === \"String\")\r\n                {\r\n                    let characters: string[] = <string[]>(constant.value);\r\n                    for (let j = 0; j < characters.length; j++)\r\n                    {\r\n                        definitions.push(new MemoryDefinition(assemblyData.dataAddress, size, characters[j].charCodeAt(0)));\r\n                        assemblyData.dataAddress += size;\r\n                    }\r\n                }\r\n                else if (constant.tag === \"Number\")\r\n                {\r\n                    definitions.push(new MemoryDefinition(assemblyData.dataAddress, size, constant.value));\r\n                    assemblyData.dataAddress += size;\r\n                }\r\n            }\r\n        }\r\n\r\n        return definitions;\r\n    }\r\n\r\n    private assembleTextSegment(textLines: any[], assemblyData: AssemblyData): EncodedInstruction[]\r\n    {\r\n        let instructions: EncodedInstruction[] = [];\r\n\r\n        for (let i = 0; i < textLines.length; i++)\r\n        {\r\n            assemblyData.line = textLines[i].location.start.line - 1;\r\n            try\r\n            {\r\n                let instruction: EncodedInstruction = this.assembleInstruction(textLines[i].line, assemblyData);\r\n                if (instruction !== null)\r\n                {\r\n                    instructions.push(instruction);\r\n                    assemblyData.lineMap.mapLine(assemblyData.textAddress, assemblyData.line);\r\n                    assemblyData.textAddress++;\r\n                }\r\n            }\r\n            catch (e)\r\n            {\r\n                if (e instanceof AssemblyException)\r\n                {\r\n                    throw new AssemblyException(e.message, assemblyData.line + 1, textLines[i].line);\r\n                }\r\n                else\r\n                {\r\n                    throw e;\r\n                }\r\n            }\r\n        }\r\n\r\n        return instructions;\r\n    }\r\n\r\n    private assembleInstruction(line: {tag: string, label: any, instruction: any}, assemblyData: AssemblyData): EncodedInstruction\r\n    {\r\n        if (line.label !== null)\r\n        {\r\n            this.assembleLabel(line.label, assemblyData, MemoryType.Text);\r\n        }\r\n\r\n        if (line.instruction !== null)\r\n        {\r\n            return this.parseInstruction(line.instruction, assemblyData);\r\n        }\r\n        else\r\n        {\r\n            return null;\r\n        }\r\n    }\r\n    private parseInstruction(instruction: {tag: string, type: string, name: string, operands: any[]},\r\n                             assemblyData: AssemblyData): EncodedInstruction\r\n    {\r\n        if (!_.has(InstructionMapping, instruction.name))\r\n        {\r\n            throw new AssemblyException(\"Unknown instruction name \" + instruction.name);\r\n        }\r\n\r\n        let instructionInstance: Instruction = new InstructionMapping[instruction.name];\r\n        return new EncodedInstruction(\r\n            instructionInstance,\r\n            this.loadParameters(instructionInstance, instruction.operands, instruction.name, assemblyData)\r\n        );\r\n    }\r\n\r\n    private loadParameters(instruction: Instruction, operands: any[], name: string, assemblyData: AssemblyData): Parameter[]\r\n    {\r\n        if (operands !== undefined && operands.length == 2)\r\n        {\r\n            if (this.isMemoryDereference(operands[0]))\r\n            {\r\n                operands[0].size = operands[1].size;\r\n            }\r\n        }\r\n\r\n        this.checkParameterCompatibility(instruction, operands, name);\r\n\r\n        let mapping = {};\r\n        mapping[Parameter.Reg] = this.parseRegisterParameter;\r\n        mapping[Parameter.Constant] = this.parseLabelParameter;\r\n        mapping[Parameter.DerefConstant] = this.parseLabelParameter;\r\n        mapping[Parameter.Memory] = this.parseMemoryParameter;\r\n\r\n        return _.map(operands, (operand) => {\r\n            let innerOperand: any = this.getInnerParameter(operand);\r\n            return mapping[this.getTag(innerOperand)].call(this, this.getParameterSize(operand), innerOperand, assemblyData);\r\n        });\r\n    }\r\n    private parseRegisterParameter(size: number, operand: any, assemblyData: AssemblyData): RegisterParameter\r\n    {\r\n        return new RegisterParameter(size, REGISTER_INDEX[this.parseRegisterName(operand)].id);\r\n    }\r\n    private parseLabelParameter(size: number, operand: any, assemblyData: AssemblyData): LabelParameter\r\n    {\r\n        let labelParameter: LabelParameter;\r\n        if (_.has(operand, \"deref\") && operand.deref)\r\n        {\r\n            labelParameter = new DerefLabelParameter(size, operand.tag === \"Label\" ? operand.value : \"\", this.parseIndexer(operand.index));\r\n        }\r\n        else\r\n        {\r\n            labelParameter = new LabelParameter(size, operand.tag === \"Label\" ? operand.value : \"\");\r\n        }\r\n\r\n        if (operand.tag === \"Label\")\r\n        {\r\n            assemblyData.labelResolver.markUnresolvedParameter(labelParameter, assemblyData.line);\r\n        }\r\n        else\r\n        {\r\n            labelParameter.resolveLabel(operand.value);\r\n        }\r\n\r\n        return labelParameter;\r\n    }\r\n    private parseMemoryParameter(size: number, operand: any, assemblyData: AssemblyData): MemoryParameter\r\n    {\r\n        let baseRegId: number = REGISTER_INDEX[this.parseRegisterName(operand.baseRegister)].id;\r\n        let indexer: Indexer = this.parseIndexer(operand.index);\r\n\r\n        return new MemoryParameter(size, baseRegId, indexer);\r\n    }\r\n    private parseIndexer(index: any): Indexer\r\n    {\r\n        let indexReg: number = REGISTER_INDEX.NULL.id;\r\n        let multiplier: number = 1;\r\n        let constant: number = 0;\r\n\r\n        if (index !== null)\r\n        {\r\n            if (index.index != null)\r\n            {\r\n                indexReg = REGISTER_INDEX[this.parseRegisterName(index.index.register)].id;\r\n                multiplier = index.index.multiplier;\r\n            }\r\n\r\n            if (index.constant != null)\r\n            {\r\n                constant = index.constant.value;\r\n            }\r\n        }\r\n\r\n        return {indexReg, multiplier, constant};\r\n    }\r\n    private parseRegisterName(operand: any): string\r\n    {\r\n        let registerName: string = operand.name;\r\n        if (!_.has(REGISTER_INDEX, registerName))\r\n        {\r\n            throw new AssemblyException(\"Unknown register \" + registerName);\r\n        }\r\n\r\n        return registerName;\r\n    }\r\n\r\n    private checkParameterCompatibility(instruction: Instruction, operands: any[], name: string)\r\n    {\r\n        if (operands !== undefined && operands.length == 2)\r\n        {\r\n            if (this.getParameterSize(operands[0]) != this.getParameterSize(operands[1]))\r\n            {\r\n                throw new AssemblyException(\"Wrong size of operands\");\r\n            }\r\n        }\r\n\r\n        let parameterMask = _.map(operands, (operand) => this.getTag(this.getInnerParameter(operand)));\r\n        let validMasks: string[][] = instruction.validParameters;\r\n\r\n        for (let i = 0; i < validMasks.length; i++)\r\n        {\r\n            if (_.isEqual(parameterMask, validMasks[i]))\r\n            {\r\n                return;\r\n            }\r\n        }\r\n\r\n        throw new AssemblyException(\"Unknown parameter combination for instruction \" + name + \".\" +\r\n            \" Got \" + parameterMask.toString() + \", expected one of \" + JSON.stringify(validMasks));\r\n    }\r\n\r\n    private getTag(operand: any): string\r\n    {\r\n        let tag: string = operand.tag;\r\n        if (_.includes([\"Label\", \"Number\"], tag))\r\n        {\r\n            tag = Parameter.Constant;\r\n\r\n            if (_.has(operand, \"deref\") && operand.deref)\r\n            {\r\n                tag = Parameter.DerefConstant;\r\n            }\r\n        }\r\n        else if (tag === \"Mem\")\r\n        {\r\n            tag = Parameter.Memory;\r\n        }\r\n        else if (tag === \"Reg\")\r\n        {\r\n            tag = Parameter.Reg;\r\n        }\r\n        else\r\n        {\r\n            throw new AssemblyException(\"Unexpected tag \" + tag);\r\n        }\r\n\r\n        return tag;\r\n    }\r\n    private getInnerParameter(operand: any): any\r\n    {\r\n        if (operand.tag === \"Cast\")\r\n        {\r\n            return this.getInnerParameter(operand.value);\r\n        }\r\n        else\r\n        {\r\n            return operand;\r\n        }\r\n    }\r\n    private getParameterSize(operand: any): number\r\n    {\r\n        if (operand.tag === \"Cast\")\r\n        {\r\n            return operand.size > 0 ? operand.size : (operand.hasOwnProperty(\"value\") ? this.getParameterSize(operand.value) : 4);\r\n        }\r\n        else if (operand.hasOwnProperty(\"size\"))\r\n        {\r\n            return operand.size;\r\n        }\r\n        else return 4;\r\n    }\r\n\r\n    private isMemoryDereference(operand: any): boolean\r\n    {\r\n        const tag = this.getTag(this.getInnerParameter(operand));\r\n        return tag === Parameter.Memory || tag === Parameter.DerefConstant;\r\n    }\r\n\r\n    private assembleLabel(label: {tag: string, name: any, local: boolean}, assemblyData: AssemblyData, memoryType: MemoryType)\r\n    {\r\n        assemblyData.labelResolver.addLabel(assemblyData.getAddress(memoryType), label.name.value, label.local);\r\n    }\r\n}\r\n\r\nenum MemoryType\r\n{\r\n    Data = 0,\r\n    Text = 1\r\n}\r\n\r\nclass AssemblyData\r\n{\r\n    constructor(public textAddress: number = 0,\r\n                public dataAddress: number = 0,\r\n                public lineMap: LineMap = new LineMap(),\r\n                public labelResolver: LabelResolver = new LabelResolver(),\r\n                public line: number = 0)\r\n    {\r\n\r\n    }\r\n\r\n    public getAddress(memoryType: MemoryType): number\r\n    {\r\n        return memoryType === MemoryType.Data ? this.dataAddress : this.textAddress;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/assembly/assembler.ts","import * as _ from \"lodash\";\r\nimport {Instruction} from \"../emulation/instruction/instruction\";\r\nimport {Parameter} from \"../emulation/instruction/parameter\";\r\nimport {CPU} from \"../emulation/cpu\";\r\nimport {MemoryView} from \"../emulation/memory-view\";\r\n\r\nexport class EncodedInstruction\r\n{\r\n    private instruction: Instruction;\r\n    private parameters: Parameter[];\r\n\r\n    constructor(instruction: Instruction, parameters: Parameter[])\r\n    {\r\n        this.instruction = instruction;\r\n        this.parameters = parameters;\r\n    }\r\n\r\n    public instantiate(cpu: CPU): Instruction\r\n    {\r\n        let data: MemoryView[] = _.map(this.parameters, (parameter: Parameter) => parameter.fetchData(cpu));\r\n        this.instruction.loadParameters.apply(this.instruction, data);\r\n\r\n        return this.instruction;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/assembly/encoding.ts","import * as _ from \"lodash\";\r\nimport {LabelParameter} from \"../emulation/instruction/parameter\";\r\nimport {AssemblyException} from \"./assembler\";\r\n\r\nclass Label\r\n{\r\n    constructor(public name: string, public local: boolean, public address: number)\r\n    {\r\n\r\n    }\r\n}\r\n\r\nexport class LabelResolver\r\n{\r\n    private labels: any = {};\r\n    private lastGlobalLabel: Label = null;\r\n    private unresolvedParameters: { labelParameter: LabelParameter, line: number }[] = [];\r\n\r\n    addLabel(address: number, label: string, local: boolean = false)\r\n    {\r\n        label = this.normalizeLabelName(label, local, address);\r\n\r\n        if (this.hasLabel(label))\r\n        {\r\n            throw new AssemblyException(\"Duplicate label found: \" + label);\r\n        }\r\n\r\n        this.labels[label] = new Label(label, local, address);\r\n\r\n        if (!local)\r\n        {\r\n            this.lastGlobalLabel = this.labels[label];\r\n        }\r\n    }\r\n\r\n    markUnresolvedParameter(labelParameter: LabelParameter, line: number)\r\n    {\r\n        if (labelParameter.label.startsWith(\".\"))\r\n        {\r\n            if (this.lastGlobalLabel === null)\r\n            {\r\n                throw new AssemblyException(\"Local label used without global label: \" + labelParameter.label, line);\r\n            }\r\n\r\n            labelParameter.label = this.lastGlobalLabel.name + labelParameter.label;\r\n        }\r\n\r\n        this.unresolvedParameters.push({\r\n            labelParameter: labelParameter,\r\n            line: line\r\n        });\r\n    }\r\n    resolveAddresses()\r\n    {\r\n        _.each(this.unresolvedParameters, (record: { labelParameter: LabelParameter, line: number }) => {\r\n            if (!_.has(this.labels, record.labelParameter.label))\r\n            {\r\n                throw new AssemblyException(\"Unknown label \" + record.labelParameter.label, record.line + 1);\r\n            }\r\n\r\n            record.labelParameter.resolveLabel(this.labels[record.labelParameter.label].address);\r\n        });\r\n    }\r\n\r\n    private normalizeLabelName(label: string, local: boolean, address: number): string\r\n    {\r\n        if (local)\r\n        {\r\n            let previousLabel: Label = this.findPreviousGlobalLabel(address);\r\n\r\n            if (previousLabel === undefined)\r\n            {\r\n                throw new AssemblyException(\"Local label without a global label: \" + label);\r\n            }\r\n\r\n            return previousLabel.name + \".\" + label;\r\n        }\r\n\r\n        return label;\r\n    }\r\n    private hasLabel(label: string): boolean\r\n    {\r\n        return _.has(this.labels, label);\r\n    }\r\n    private findPreviousGlobalLabel(address: number): Label\r\n    {\r\n        return _.findLast(this.labels, (label: Label) => !label.local && label.address <= address);\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/assembly/label.ts","import * as _ from \"lodash\";\r\nimport {Instruction} from \"../emulation/instruction/instruction\";\r\nimport {CPU} from \"../emulation/cpu\";\r\nimport {EncodedInstruction} from \"./encoding\";\r\nimport {MemoryDefinition} from \"./assembler\";\r\n\r\nexport class LineMap\r\n{\r\n    private mapping: any = {};\r\n\r\n    public mapLine(address: number, line: number)\r\n    {\r\n        this.mapping[address] = line;\r\n    }\r\n    public getLineByAddress(address: number): number\r\n    {\r\n        return _.findLast(this.mapping, (line: number, key: number) => key <= address);\r\n    }\r\n    public getAddressByLine(row: number): number\r\n    {\r\n        return Number(_.findKey(this.mapping, (line: number) => line === row));\r\n    }\r\n}\r\n\r\nexport class Program\r\n{\r\n    constructor(private _instructions: EncodedInstruction[],\r\n                private _memoryDefinitions: MemoryDefinition[],\r\n                private _lineMap: LineMap)\r\n    {\r\n\r\n    }\r\n\r\n    get instructions(): EncodedInstruction[]\r\n    {\r\n        return this._instructions;\r\n    }\r\n    get memoryDefinitions(): MemoryDefinition[]\r\n    {\r\n        return this._memoryDefinitions;\r\n    }\r\n    public get lineMap(): LineMap\r\n    {\r\n        return this._lineMap;\r\n    }\r\n\r\n    public getInstructionByAddress(cpu: CPU, address: number): Instruction\r\n    {\r\n        return this.instructions[address].instantiate(cpu);\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/assembly/program.ts","module.exports = \"<div class=\\\"column-wrapper\\\">\\r\\n  <div class=\\\"column\\\">\\r\\n    <div class=\\\"editor-wrapper\\\">\\r\\n      <h1>Code</h1>\\r\\n      <asm-editor (compile)=\\\"compileSource($event)\\\"\\r\\n                  [activeLine]=\\\"getActiveLine()\\\"\\r\\n                  (breakpointChange)=\\\"onBreakpointChanged($event)\\\"></asm-editor>\\r\\n      <div class=\\\"errors\\\">{{ compileErrors }}</div>\\r\\n    </div>\\r\\n    <div class=\\\"execution-wrapper\\\">\\r\\n      <h2>Controls</h2>\\r\\n      <execution-controls [process]=\\\"runtime.process\\\"></execution-controls>\\r\\n    </div>\\r\\n    <div class=\\\"console-wrapper\\\">\\r\\n      <h2>Console</h2>\\r\\n      <console></console>\\r\\n    </div>\\r\\n  </div>\\r\\n  <div class=\\\"column\\\">\\r\\n    <div class=\\\"cpu-wrapper\\\">\\r\\n      <h3>CPU</h3>\\r\\n      <cpu [cpu]=\\\"runtime.process?.cpu\\\"></cpu>\\r\\n    </div>\\r\\n    <div class=\\\"memory-wrapper\\\">\\r\\n      <h3>Memory</h3>\\r\\n      <div class=\\\"inner\\\" *ngIf=\\\"runtime.hasProcess()\\\">\\r\\n        Byte size:\\r\\n        <div class=\\\"size-wrapper\\\">\\r\\n          <label class=\\\"size-label\\\" *ngFor=\\\"let item of [1, 2, 4]\\\">\\r\\n            <input type=\\\"radio\\\" name=\\\"memory-word-size\\\" (click)=\\\"memory.wordSize = item\\\"\\r\\n                   [checked]=\\\"item === memory.wordSize\\\"><span>{{item}}</span></label>\\r\\n        </div>\\r\\n        Ascii: <input type=\\\"checkbox\\\" [checked]=\\\"memory.ascii\\\" (change)=\\\"memory.ascii = $event.target.checked\\\" />\\r\\n        <memory #memory [memory]=\\\"runtime.process?.cpu?.memory\\\"></memory>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/components/app/app.html\n// module id = ./src/app/components/app/app.html\n// module chunks = 1","import {Component, ViewChild, AfterViewInit} from \"@angular/core\";\r\nimport {MemoryBlock} from \"../../emulation/memory-block\";\r\nimport {CPU, Interrupt} from \"../../emulation/cpu\";\r\nimport {Assembler, AssemblyException} from \"../../assembly/assembler\";\r\nimport {Program} from \"../../assembly/program\";\r\nimport {AsmEditorComponent} from \"../asm-editor/asm-editor\";\r\nimport {Runtime} from \"../../emulation/runtime\";\r\nimport {Process} from \"../../emulation/process\";\r\nimport {ConsoleComponent} from \"../console/console\";\r\nimport {RuntimeException} from \"../../emulation/runtime-exception\";\r\n\r\n@Component({\r\n    selector: \"app\",\r\n    templateUrl: \"app.html\"\r\n})\r\nexport class AppComponent implements AfterViewInit\r\n{\r\n    @ViewChild(AsmEditorComponent) asmEditor: AsmEditorComponent;\r\n    @ViewChild(ConsoleComponent) console: ConsoleComponent;\r\n\r\n    private runtime: Runtime = new Runtime();\r\n    private assembler: Assembler = new Assembler();\r\n    private cpu: CPU;\r\n\r\n    private memorySize: number = 256;\r\n    private compileErrors: string = \"\";\r\n\r\n    ngAfterViewInit()\r\n    {\r\n        this.asmEditor.text =\r\n`section .data\r\nhello:\r\n    db 'Hello world!', 10, 0\r\n\r\nsection .text\r\n\r\nasd:\r\n    MOV EAX, hello\r\n    MOV [EAX], BYTE 97 ; MOV EAX, hello\r\n    INT 2\r\n    HLT`\r\n        ;\r\n    }\r\n\r\n    private compileSource(source: string)\r\n    {\r\n        try\r\n        {\r\n            let program: Program = this.assembler.assemble(source);\r\n            let memory: MemoryBlock = new MemoryBlock(this.memorySize);\r\n            this.cpu = new CPU(program, memory);\r\n            this.cpu.onInterrupt.subscribe((interrupt: Interrupt) => this.handleInterrupt(interrupt));\r\n            this.cpu.onError.subscribe((runtimeException: RuntimeException) => alert(runtimeException.message));\r\n            this.cpu.breakpoints = this.asmEditor.breakpoints;\r\n            this.runtime.process = new Process(this.cpu);\r\n\r\n            this.compileErrors = \"\";\r\n        }\r\n        catch (e)\r\n        {\r\n            if (e instanceof AssemblyException)\r\n            {\r\n                this.compileErrors = `Error at line ${e.line}: ${e.message}`;\r\n            }\r\n            else\r\n            {\r\n                throw e;\r\n            }\r\n        }\r\n    }\r\n\r\n    private handleInterrupt(interrupt: Interrupt)\r\n    {\r\n        try\r\n        {\r\n            switch (interrupt)\r\n            {\r\n                case Interrupt.WRITE_NUM:\r\n                    this.print(this.cpu.getRegisterByName(\"EAX\").getValue().toString());\r\n                    break;\r\n                case Interrupt.WRITE_STRING:\r\n                {\r\n                    let data: string = \"\";\r\n                    let start: number = this.cpu.getRegisterByName(\"EAX\").getValue();\r\n                    while (true)\r\n                    {\r\n                        let char = this.cpu.derefAddress(start, 1).getValue();\r\n                        if (char === 0)\r\n                        {\r\n                            break;\r\n                        }\r\n                        data += String.fromCharCode(char);\r\n                        start++;\r\n                    }\r\n                    this.print(data);\r\n                    break;\r\n                }\r\n                default:\r\n                {\r\n                    throw new RuntimeException(\"Unknown interrupt code: \" + interrupt);\r\n                }\r\n            }\r\n        }\r\n        catch (e)\r\n        {\r\n            this.cpu.pause();\r\n            alert(e.message);\r\n        }\r\n    }\r\n\r\n    private print(value: string)\r\n    {\r\n        this.console.print(value);\r\n    }\r\n\r\n    private onBreakpointChanged(breakpoints: number[])\r\n    {\r\n        if (this.runtime.hasProcess())\r\n        {\r\n            this.runtime.process.cpu.breakpoints = breakpoints;\r\n        }\r\n    }\r\n\r\n    private getActiveLine(): number\r\n    {\r\n        if (this.runtime.hasProcess() && this.runtime.process.isStarted())\r\n        {\r\n            return this.runtime.process.cpu.activeLine;\r\n        }\r\n        else\r\n        {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/components/app/app.ts","module.exports = \"<div class=\\\"asm-editor\\\">\\r\\n  <div #editor class=\\\"editor\\\"></div>\\r\\n  <button class=\\\"assemble btn btn-primary\\\" title=\\\"Assemble\\\" (click)=\\\"emitCompile()\\\">Assemble</button>\\r\\n</div>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/components/asm-editor/asm-editor.html\n// module id = ./src/app/components/asm-editor/asm-editor.html\n// module chunks = 1","import {Component, Output, EventEmitter, ViewChild, ElementRef, Input, AfterViewInit} from \"@angular/core\";\r\nimport * as _ from \"lodash\";\r\nimport * as ace from \"brace\";\r\nace.config.set(\"modePath\", \"/assets/js\");\r\n\r\n@Component({\r\n    selector: \"asm-editor\",\r\n    templateUrl: \"./asm-editor.html\"\r\n})\r\nexport class AsmEditorComponent implements AfterViewInit\r\n{\r\n    private static ACTIVE_LINE_CLASS: string = \"active-line\";\r\n\r\n    @Output() compile: EventEmitter<string> = new EventEmitter<string>();\r\n    @Output() breakpointChange: EventEmitter<number[]> = new EventEmitter<number[]>();\r\n\r\n    @ViewChild(\"editor\") private editor: ElementRef;\r\n    private aceEditor: any = null;\r\n\r\n    private _breakpoints: number[] = [];\r\n    private _activeLine: number = null;\r\n\r\n    get breakpoints(): number[]\r\n    {\r\n        return this._breakpoints;\r\n    }\r\n\r\n    @Input() set activeLine(value: number)\r\n    {\r\n        if (this.aceEditor === null)\r\n        {\r\n            return;\r\n        }\r\n\r\n        this.removeActiveLine();\r\n\r\n        if (value !== null)\r\n        {\r\n            this._activeLine = value;\r\n            this.aceEditor.session.addGutterDecoration(value, AsmEditorComponent.ACTIVE_LINE_CLASS);\r\n            this.aceEditor.gotoLine(value + 1);\r\n        }\r\n    }\r\n\r\n    @Input() set text(value: string)\r\n    {\r\n        if (this.aceEditor === null)\r\n        {\r\n            return;\r\n        }\r\n\r\n        this.aceEditor.session.getDocument().setValue(value);\r\n    }\r\n\r\n    ngAfterViewInit()\r\n    {\r\n        const el = this.editor.nativeElement;\r\n        this.aceEditor = ace.edit(el);\r\n        this.aceEditor.session.setMode(\"ace/mode/assembly_x86\");\r\n        this.aceEditor.on(\"guttermousedown\", (e: any) =>\r\n        {\r\n            let target = e.domEvent.target;\r\n            if (target.className.indexOf(\"ace_gutter-cell\") === -1)\r\n            {\r\n                return;\r\n            }\r\n\r\n            let row = e.getDocumentPosition().row;\r\n            this.toggleBreakpoint(row);\r\n            e.stop();\r\n        });\r\n    }\r\n\r\n    private toggleBreakpoint(row: number)\r\n    {\r\n        if (this.hasBreakpoint(row))\r\n        {\r\n            this.aceEditor.session.clearBreakpoint(row);\r\n            _.remove(this._breakpoints, (value: number) => value === row);\r\n        }\r\n        else\r\n        {\r\n            this.aceEditor.session.setBreakpoint(row);\r\n            this._breakpoints.push(row);\r\n        }\r\n\r\n        this.breakpointChange.emit(this._breakpoints);\r\n    }\r\n    private hasBreakpoint(row: number): boolean\r\n    {\r\n        return _.includes(this._breakpoints, row);\r\n    }\r\n\r\n    private removeActiveLine()\r\n    {\r\n        if (this._activeLine !== -1)\r\n        {\r\n            this.aceEditor.session.removeGutterDecoration(this._activeLine, AsmEditorComponent.ACTIVE_LINE_CLASS);\r\n        }\r\n    }\r\n\r\n    private emitCompile()\r\n    {\r\n        this.compile.emit(this.aceEditor.getValue());\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/components/asm-editor/asm-editor.ts","module.exports = \"<div class=\\\"console\\\">\\r\\n  <pre><code class=\\\"text\\\">{{ value }}</code></pre>\\r\\n  <button class=\\\"btn btn-primary clear\\\" title=\\\"Clear console\\\" (click)=\\\"clear()\\\">Clear console</button>\\r\\n</div>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/components/console/console.html\n// module id = ./src/app/components/console/console.html\n// module chunks = 1","import {Component} from \"@angular/core\";\r\n\r\n@Component({\r\n    selector: \"console\",\r\n    templateUrl: \"./console.html\"\r\n})\r\nexport class ConsoleComponent\r\n{\r\n    private value: string = \"\";\r\n\r\n    public print(value: string)\r\n    {\r\n        this.value += value;\r\n    }\r\n\r\n    private clear()\r\n    {\r\n        this.value = \"\";\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/components/console/console.ts","module.exports = \"<div class=\\\"cpu\\\" *ngIf=\\\"cpu !== null\\\">\\r\\n  <label class=\\\"tick-rate\\\">Tick rate: every {{ cpu.tickRate }} ms\\r\\n    <input type=\\\"range\\\" min=\\\"100\\\" max=\\\"500\\\" [(ngModel)]=\\\"cpu.tickRate\\\" /></label>\\r\\n  <register [cpu]=\\\"cpu\\\" [name]=\\\"reg\\\" *ngFor=\\\"let reg of getRegisterKeys()\\\"></register>\\r\\n  <div *ngFor=\\\"let flag of getFlags()\\\">\\r\\n    <span class=\\\"label label-primary name\\\">{{ flag.name }}</span>\\r\\n    <span class=\\\"label label-default value\\\">{{ flag.value ? 1 : 0 }}</span>\\r\\n  </div>\\r\\n</div>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/components/cpu/cpu.html\n// module id = ./src/app/components/cpu/cpu.html\n// module chunks = 1","import {Component, Input} from \"@angular/core\";\r\nimport {CPU} from \"../../emulation/cpu\";\r\n\r\n@Component({\r\n    selector: \"cpu\",\r\n    templateUrl: \"./cpu.html\"\r\n})\r\nexport class CpuComponent\r\n{\r\n    @Input() cpu: CPU = null;\r\n\r\n    private getRegisterKeys(): string[]\r\n    {\r\n        return [\"EIP\", \"EAX\", \"EBX\", \"ECX\", \"EDX\", \"EBP\", \"ESP\", \"ESI\", \"EDI\"];\r\n    }\r\n    private getFlags(): { name: string, value: boolean }[]\r\n    {\r\n        return [\r\n            { name: \"ZF\", value: this.cpu.statusWord.zero },\r\n            { name: \"SF\", value: this.cpu.statusWord.signum },\r\n            { name: \"OF\", value: this.cpu.statusWord.overflow },\r\n            { name: \"CF\", value: this.cpu.statusWord.carry },\r\n            { name: \"DF\", value: this.cpu.statusWord.direction },\r\n            { name: \"PF\", value: this.cpu.statusWord.parity }\r\n        ];\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/components/cpu/cpu.ts","module.exports = \"<div class=\\\"register\\\" *ngIf=\\\"cpu !== null\\\">\\r\\n  <span class=\\\"label label-primary name\\\">{{ name }}</span>\\r\\n  <span class=\\\"label label-default value\\\">{{ getValue() }}</span>\\r\\n</div>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/components/cpu/register.html\n// module id = ./src/app/components/cpu/register.html\n// module chunks = 1","import {Component, Input} from \"@angular/core\";\r\nimport {CPU} from \"../../emulation/cpu\";\r\n\r\n@Component({\r\n    selector: \"register\",\r\n    templateUrl: \"./register.html\"\r\n})\r\nexport class RegisterComponent\r\n{\r\n    @Input() cpu: CPU = null;\r\n    @Input() name: string = \"\";\r\n\r\n    private getValue(): number\r\n    {\r\n        return this.cpu.getRegisterByName(this.name).getValue();\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/components/cpu/register.ts","module.exports = \"<div class=\\\"execution btn-group\\\">\\r\\n  <button class=\\\"btn btn-success glyphicon glyphicon-play\\\" title=\\\"Start\\\" [disabled]=\\\"process === null || process.isStarted()\\\" (click)=\\\"onStart()\\\"></button>\\r\\n  <button class=\\\"btn btn-danger glyphicon glyphicon-stop\\\" title=\\\"Stop\\\" [disabled]=\\\"process === null || !process.isStarted()\\\" (click)=\\\"onStop()\\\"></button>\\r\\n  <button class=\\\"btn btn-danger glyphicon glyphicon-pause\\\" title=\\\"Pause\\\" [disabled]=\\\"process === null || !process.isRunning()\\\" (click)=\\\"onPause()\\\"></button>\\r\\n  <button class=\\\"btn btn-success glyphicon glyphicon-play-circle\\\" title=\\\"Continue\\\" [disabled]=\\\"process === null || !process.isPaused()\\\" (click)=\\\"onContinue()\\\"></button>\\r\\n  <button class=\\\"btn btn-info glyphicon glyphicon-step-forward\\\" title=\\\"Step\\\" [disabled]=\\\"process === null || !process.isPaused()\\\" (click)=\\\"onStep()\\\"></button>\\r\\n</div>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/components/execution/execution.html\n// module id = ./src/app/components/execution/execution.html\n// module chunks = 1","import {Component, Input, EventEmitter, Output} from \"@angular/core\";\r\nimport {Process} from \"../../emulation/process\";\r\n\r\n@Component({\r\n    selector: \"execution-controls\",\r\n    templateUrl: \"./execution.html\"\r\n})\r\nexport class ExecutionComponent\r\n{\r\n    @Input() process: Process = null;\r\n\r\n    @Output() start: EventEmitter<Process> = new EventEmitter<Process>();\r\n    @Output() stop: EventEmitter<Process> = new EventEmitter<Process>();\r\n    @Output() continueEvent: EventEmitter<Process> = new EventEmitter<Process>();\r\n    @Output() pause: EventEmitter<Process> = new EventEmitter<Process>();\r\n    @Output() step: EventEmitter<Process> = new EventEmitter<Process>();\r\n\r\n    private onStart()\r\n    {\r\n        this.start.emit(this.process);\r\n        this.process.start();\r\n    }\r\n    private onStop()\r\n    {\r\n        this.stop.emit(this.process);\r\n        this.process.cpu.halt();\r\n    }\r\n    private onContinue()\r\n    {\r\n        this.continueEvent.emit(this.process);\r\n        this.process.cpu.run();\r\n    }\r\n    private onPause()\r\n    {\r\n        this.pause.emit(this.process);\r\n        this.process.cpu.pause();\r\n    }\r\n    private onStep()\r\n    {\r\n        this.step.emit(this.process);\r\n        this.process.cpu.step();\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/components/execution/execution.ts","module.exports = \"<div class=\\\"memory\\\" *ngIf=\\\"memory !== null\\\">\\r\\n  <div class=\\\"row\\\" *ngFor=\\\"let row of createRange(getRowCount())\\\">\\r\\n    <div class=\\\"col\\\" *ngFor=\\\"let col of createRange(width)\\\">\\r\\n        <span class=\\\"cell\\\" *ngIf=\\\"memory.isValid(createAddress(row, col))\\\">\\r\\n          {{ getCellValue(createAddress(row, col)) }}\\r\\n        </span>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/components/memory/memory.html\n// module id = ./src/app/components/memory/memory.html\n// module chunks = 1","import {Component, Input} from \"@angular/core\";\r\nimport {MemoryBlock} from \"../../emulation/memory-block\";\r\nimport * as _ from \"lodash\";\r\n\r\n@Component({\r\n    selector: \"memory\",\r\n    templateUrl: \"./memory.html\"\r\n})\r\nexport class MemoryComponent\r\n{\r\n    private _ascii: boolean = false;\r\n\r\n    @Input() memory: MemoryBlock = null;\r\n    @Input() wordSize: number = 1;\r\n    @Input() width: number = 10;\r\n\r\n    @Input() set ascii(value: boolean)\r\n    {\r\n        if (value)\r\n        {\r\n            this.wordSize = 1;\r\n        }\r\n\r\n        this._ascii = value;\r\n    }\r\n    get ascii(): boolean\r\n    {\r\n        return this._ascii;\r\n    }\r\n\r\n    private getRowCount(): number\r\n    {\r\n        return Math.ceil(this.memory.size / this.width / this.wordSize);\r\n    }\r\n    private createRange(count: number): number[]\r\n    {\r\n        return _.range(count);\r\n    }\r\n    private createAddress(row: number, col: number): number\r\n    {\r\n        return row * this.width * this.wordSize + col * this.wordSize;\r\n    }\r\n    private getCellValue(address: number): string\r\n    {\r\n        let value: number = this.memory.load(address, this.wordSize).getValue();\r\n\r\n        if (this._ascii)\r\n        {\r\n            return String.fromCharCode(value);\r\n        }\r\n        else\r\n        {\r\n            return value.toString();\r\n        }\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/components/memory/memory.ts","import {CPU} from \"./cpu\";\r\nimport {RuntimeException} from \"./runtime-exception\";\r\n\r\n// TODO: reimplement the operations in bitwise manner\r\nexport class ALU\r\n{\r\n    constructor(private cpu: CPU)\r\n    {\r\n\r\n    }\r\n\r\n    add(op1: number, op2: number, previousCarry: number = 0): number\r\n    {\r\n        op1 = this.normalize(op1);\r\n        op2 = this.normalize(op2);\r\n\r\n        let result: number = 0;\r\n        let carry: number[] = [previousCarry, 0];\r\n\r\n        for (let i = 0; i < 32; i++)\r\n        {\r\n            carry[0] = carry[1];\r\n            let value: number = (op1 & 1) + (op2 & 1) + carry[0];\r\n            op1 >>= 1;\r\n            op2 >>= 1;\r\n\r\n            result |= (value % 2) << i;\r\n            carry[1] = value / 2;\r\n        }\r\n\r\n        this.cpu.statusWord.carry = carry[1] === 1;\r\n        this.cpu.statusWord.overflow = (carry[0] ^ carry[1]) === 1;\r\n        this.cpu.setFlags(result);\r\n\r\n        return this.normalize(result);\r\n    }\r\n    sub(op1: number, op2: number, previousCarry: number = 0): number\r\n    {\r\n        return this.add(op1, this.normalize(-op2), previousCarry);\r\n    }\r\n\r\n    idivide(dividend: number, divisor: number): { value: number, remainder: number }\r\n    {\r\n        dividend = this.normalize(dividend);\r\n        divisor = this.normalize(divisor);\r\n\r\n        if (divisor === 0)\r\n        {\r\n            throw new RuntimeException(\"Division by zero\");\r\n        }\r\n\r\n        return {\r\n            value: this.normalize(dividend / divisor),\r\n            remainder: this.normalize(dividend % divisor)\r\n        };\r\n    }\r\n    imultiply(op1: number, op2: number): { lowerHalf: number, upperHalf: number }\r\n    {\r\n        op1 = this.normalize(op1);\r\n        op2 = this.normalize(op2);\r\n\r\n        let result: number = op1 * op2;\r\n        let lowerHalf: number = result & 0xFFFFFFFF;\r\n        let upperHalf = result / Math.pow(2, 32);\r\n\r\n        return {\r\n            lowerHalf: this.normalize(lowerHalf),\r\n            upperHalf: this.normalize(upperHalf)\r\n        };\r\n    }\r\n\r\n    inc(value: number): number\r\n    {\r\n        value = this.normalize(value);\r\n        return this.normalize(value + 1);\r\n    }\r\n    dec(value: number): number\r\n    {\r\n        value = this.normalize(value);\r\n        return this.normalize(value - 1);\r\n    }\r\n\r\n    and(op1: number, op2: number): number\r\n    {\r\n        let result: number = op1 & op2;\r\n\r\n        this.cpu.setFlags(result);\r\n        this.cpu.statusWord.overflow = false;\r\n        this.cpu.statusWord.carry = false;\r\n\r\n        return result;\r\n    }\r\n    or(op1: number, op2: number): number\r\n    {\r\n        let result: number = op1 | op2;\r\n\r\n        this.cpu.setFlags(result);\r\n        this.cpu.statusWord.overflow = false;\r\n        this.cpu.statusWord.carry = false;\r\n\r\n        return result;\r\n    }\r\n    xor(op1: number, op2: number): number\r\n    {\r\n        let result: number = op1 ^ op2;\r\n\r\n        this.cpu.setFlags(result);\r\n        this.cpu.statusWord.overflow = false;\r\n        this.cpu.statusWord.carry = false;\r\n\r\n        return result;\r\n    }\r\n\r\n    extend64bit(lowerHalf: number, upperHalf: number): number\r\n    {\r\n        lowerHalf = this.normalize(lowerHalf);\r\n        upperHalf = this.normalize(upperHalf);\r\n\r\n        return this.normalize(upperHalf * (Math.pow(2, 32)) + lowerHalf);\r\n    }\r\n\r\n    private normalize(value: number): number\r\n    {\r\n        return value | 0;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/emulation/alu.ts","import {CPU} from \"./cpu\";\r\n\r\nexport class ConditionUnit\r\n{\r\n    constructor(private cpu: CPU)\r\n    {\r\n\r\n    }\r\n\r\n    get overflow(): boolean\r\n    {\r\n        return this.cpu.statusWord.overflow;\r\n    }\r\n    get sign(): boolean\r\n    {\r\n        return this.cpu.statusWord.signum;\r\n    }\r\n    get parity(): boolean\r\n    {\r\n        return this.cpu.statusWord.parity;\r\n    }\r\n\r\n    get equal(): boolean\r\n    {\r\n        return this.cpu.statusWord.zero;\r\n    }\r\n\r\n    get below(): boolean\r\n    {\r\n        return this.cpu.statusWord.carry;\r\n    }\r\n    get above(): boolean\r\n    {\r\n        return !this.cpu.statusWord.carry && !this.cpu.statusWord.zero;\r\n    }\r\n\r\n    get less(): boolean\r\n    {\r\n        return this.cpu.statusWord.signum !== this.cpu.statusWord.overflow;\r\n    }\r\n    get greater(): boolean\r\n    {\r\n        return this.cpu.statusWord.zero && (this.cpu.statusWord.signum === this.cpu.statusWord.overflow);\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/emulation/condition-unit.ts","import * as _ from \"lodash\";\r\nimport {MemoryBlock} from \"./memory-block\";\r\nimport {MemoryView, NumericConstant} from \"./memory-view\";\r\nimport {Instruction} from \"./instruction/instruction\";\r\nimport {ALU} from \"./alu\";\r\nimport {Program} from \"../assembly/program\";\r\nimport {Dictionary} from \"../util/interfaces\";\r\nimport {EventEmitter} from \"@angular/core\";\r\nimport {RuntimeException} from \"./runtime-exception\";\r\nimport {ConditionUnit} from \"./condition-unit\";\r\nimport {StatusWord} from \"./status-word\";\r\n\r\nclass RegisterInfo\r\n{\r\n    private _id: number;\r\n    private _bank: number;\r\n    private _byteSize: number;\r\n    private _index: number;\r\n\r\n    constructor(id: number, bank: number, byteSize: number, index: number = 0)\r\n    {\r\n        this._id = id;\r\n        this._bank = bank;\r\n        this._byteSize = byteSize;\r\n        this._index = index;\r\n    }\r\n\r\n    get id(): number\r\n    {\r\n        return this._id;\r\n    }\r\n    get index(): number\r\n    {\r\n        return this._index;\r\n    }\r\n    get byteSize(): number\r\n    {\r\n        return this._byteSize;\r\n    }\r\n    get bank(): number\r\n    {\r\n        return this._bank;\r\n    }\r\n}\r\n\r\nexport enum Interrupt\r\n{\r\n    WRITE_NUM = 1,\r\n    WRITE_STRING = 2\r\n}\r\n\r\nexport const REGISTER_INDEX: any = {\r\n    NULL    : new RegisterInfo(0, 0, 4),\r\n    EIP     : new RegisterInfo(1, 1, 4),\r\n    EBP     : new RegisterInfo(2, 2, 4),\r\n    ESP     : new RegisterInfo(3, 3, 4),\r\n    ESI     : new RegisterInfo(4, 4, 4),\r\n    SI      : new RegisterInfo(5, 4, 2),\r\n    EDI     : new RegisterInfo(6, 5, 4),\r\n    DI      : new RegisterInfo(7, 5, 2),\r\n    EAX     : new RegisterInfo(20, 6, 4),\r\n    AX      : new RegisterInfo(21, 6, 2),\r\n    AH      : new RegisterInfo(22, 6, 1, 1),\r\n    AL      : new RegisterInfo(23, 6, 1),\r\n    EBX     : new RegisterInfo(24, 7, 4),\r\n    BX      : new RegisterInfo(25, 7, 2),\r\n    BH      : new RegisterInfo(26, 7, 1, 1),\r\n    BL      : new RegisterInfo(27, 7, 1),\r\n    ECX     : new RegisterInfo(28, 8, 4),\r\n    CX      : new RegisterInfo(29, 8, 2),\r\n    CH      : new RegisterInfo(30, 8, 1, 1),\r\n    CL      : new RegisterInfo(31, 8, 1),\r\n    EDX     : new RegisterInfo(32, 9, 4),\r\n    DX      : new RegisterInfo(33, 9, 2),\r\n    DH      : new RegisterInfo(34, 9, 1, 1),\r\n    DL      : new RegisterInfo(35, 9, 1)\r\n\r\n};\r\n\r\nexport class CPU\r\n{\r\n    public static INTERRUPT_EXIT: number = 0;\r\n\r\n    private status: StatusWord = new StatusWord();\r\n    private registers: MemoryBlock[];\r\n    private _registerMap: Dictionary<MemoryView> = {};\r\n    private _alu: ALU;\r\n    private _conditionUnit: ConditionUnit;\r\n    private _onInterrupt: EventEmitter<Interrupt> = new EventEmitter<Interrupt>();\r\n    private _onExit: EventEmitter<CPU> = new EventEmitter<CPU>();\r\n    private _onError: EventEmitter<RuntimeException> = new EventEmitter<RuntimeException>();\r\n    private _running: boolean = false;\r\n    private _breakpoints: number[];\r\n    private stoppedOnBreakpoint: boolean = false;\r\n    private scheduleTimeout: any = null;\r\n\r\n    constructor(private _program: Program,\r\n                private _memory: MemoryBlock,\r\n                private _tickRate: number = 500)\r\n    {\r\n        this.registers = _.map(_.range(10), () => new MemoryBlock(4));\r\n        this._alu = new ALU(this);\r\n        this._conditionUnit = new ConditionUnit(this);\r\n\r\n        _.keys(REGISTER_INDEX).forEach((key) =>\r\n        {\r\n            let reg: RegisterInfo = REGISTER_INDEX[key];\r\n            this._registerMap[key] = new MemoryView(this.registers[reg.bank], reg.byteSize, reg.index);\r\n        });\r\n        this.reset();\r\n    }\r\n\r\n    get tickRate(): number\r\n    {\r\n        return this._tickRate;\r\n    }\r\n    set tickRate(value: number)\r\n    {\r\n        this._tickRate = value;\r\n    }\r\n    get eip(): number\r\n    {\r\n        return this.registerMap[\"EIP\"].getValue();\r\n    }\r\n    get statusWord(): StatusWord\r\n    {\r\n        return this.status;\r\n    }\r\n    get memory(): MemoryBlock\r\n    {\r\n        return this._memory;\r\n    }\r\n    get program(): Program\r\n    {\r\n        return this._program;\r\n    }\r\n    get onInterrupt(): EventEmitter<Interrupt>\r\n    {\r\n        return this._onInterrupt;\r\n    }\r\n    get onExit(): EventEmitter<CPU>\r\n    {\r\n        return this._onExit;\r\n    }\r\n    get onError(): EventEmitter<RuntimeException>\r\n    {\r\n        return this._onError;\r\n    }\r\n    get alu(): ALU\r\n    {\r\n        return this._alu;\r\n    }\r\n    get conditionUnit(): ConditionUnit\r\n    {\r\n        return this._conditionUnit;\r\n    }\r\n    get registerMap(): Dictionary<MemoryView>\r\n    {\r\n        return this._registerMap;\r\n    }\r\n    get running(): boolean\r\n    {\r\n        return this._running;\r\n    }\r\n    get activeLine(): number\r\n    {\r\n        return this.program.lineMap.getLineByAddress(this.eip);\r\n    }\r\n    set breakpoints(value: number[])\r\n    {\r\n        this._breakpoints = _.filter(\r\n            _.map(value, (row: number) => this.program.lineMap.getAddressByLine(row)),\r\n            (breakpoint: number) => breakpoint !== null\r\n        );\r\n    }\r\n\r\n    reset()\r\n    {\r\n        this.getRegisterByName(\"EIP\").setValue(0);\r\n        this.getRegisterByName(\"ESP\").setValue(this.memory.size);\r\n        this.getRegisterByName(\"EBP\").setValue(this.memory.size);\r\n    }\r\n    step()\r\n    {\r\n        if (this.isFinished())\r\n        {\r\n            this.halt();\r\n            return;\r\n        }\r\n\r\n        if (this.hasBreakpoint())\r\n        {\r\n            if (!this.stoppedOnBreakpoint)\r\n            {\r\n                this.stoppedOnBreakpoint = true;\r\n                this.pause();\r\n                return;\r\n            }\r\n            else\r\n            {\r\n                this.stoppedOnBreakpoint = false;\r\n            }\r\n        }\r\n\r\n        this.executeOneInstruction();\r\n    }\r\n    run()\r\n    {\r\n        this._running = true;\r\n        this.scheduleRun();\r\n    }\r\n    runSync()\r\n    {\r\n        this._running = true;\r\n        while (this._running)\r\n        {\r\n            this.step();\r\n        }\r\n    }\r\n    pause()\r\n    {\r\n        this._running = false;\r\n        this.clearScheduledRun();\r\n    }\r\n    halt()\r\n    {\r\n        this.pause();\r\n        this.onExit.emit(this);\r\n    }\r\n    isFinished(): boolean\r\n    {\r\n        return this.eip >= this.program.instructions.length;\r\n    }\r\n\r\n    getNextInstruction(): number\r\n    {\r\n        return this.eip + 1;\r\n    }\r\n\r\n    push(value: number)\r\n    {\r\n        let esp: MemoryView = this.getRegisterByName(\"ESP\");\r\n        esp.add(-4);\r\n        this.deref(esp).setValue(value);\r\n    }\r\n    pop(): number\r\n    {\r\n        let esp: MemoryView = this.getRegisterByName(\"ESP\");\r\n        let value: number = this.deref(esp).getValue();\r\n        esp.add(4);\r\n\r\n        return value;\r\n    }\r\n    derefAddress(address: number, size: number = 4): MemoryView\r\n    {\r\n        return this.deref(new NumericConstant(address), size);\r\n    }\r\n    deref(memoryView: MemoryView, size: number = 4): MemoryView\r\n    {\r\n        let address: number = memoryView.getValue();\r\n\r\n        if (!this.memory.isValid(address))\r\n        {\r\n            throw new RuntimeException(\"Invalid dereference of address \" + address + \" at line \" + this.getLine());\r\n        }\r\n        if (address + size > this.memory.size)\r\n        {\r\n            throw new RuntimeException(\"Memory overflow at line \" + this.getLine());\r\n        }\r\n\r\n        return this.memory.load(address, size);\r\n    }\r\n    calculateEffectiveAddressFromRegister(baseReg: MemoryView, indexReg: MemoryView = null,\r\n                              multiplier: number = 1, constant: number = 0): number\r\n    {\r\n        return this.calculateEffectiveAddress(baseReg.getValue(), indexReg, multiplier, constant);\r\n    }\r\n    calculateEffectiveAddress(address: number, indexReg: MemoryView = null,\r\n                              multiplier: number = 1, constant: number = 0): number\r\n    {\r\n        if (indexReg === null)\r\n        {\r\n            indexReg = this.getRegisterByName(\"NULL\");\r\n        }\r\n\r\n        return address + indexReg.getValue() * multiplier + constant;\r\n    }\r\n    setFlags(value: number)\r\n    {\r\n        this.status.zero = value === 0;\r\n        this.status.signum = (value & (1 << 31)) !== 0;\r\n\r\n        let parity: number = 0;\r\n        for (let i = 0; i < 8; i++)\r\n        {\r\n            parity += ((value & (1 << i)) !== 0) ? 1 : 0;\r\n        }\r\n        this.status.parity = parity % 2 === 0;\r\n    }\r\n\r\n    getRegisterByName(name: string): MemoryView\r\n    {\r\n        return this.registerMap[name];\r\n    }\r\n    getRegisterByIndex(index: number): MemoryView\r\n    {\r\n        return this.getRegisterByName(_.findKey(REGISTER_INDEX, (reg: RegisterInfo) => reg.id === index));\r\n    }\r\n\r\n    private hasBreakpoint(): boolean\r\n    {\r\n        return _.includes(this._breakpoints, this.eip);\r\n    }\r\n    private executeOneInstruction()\r\n    {\r\n        let eip: number = this.eip;\r\n\r\n        try\r\n        {\r\n            let instruction: Instruction = this.loadInstruction(eip);\r\n            let nextAddress: number = instruction.execute(this);\r\n            this.getRegisterByName(\"EIP\").setValue(nextAddress);\r\n        }\r\n        catch (e)\r\n        {\r\n            this.onError.emit(e);\r\n            this.pause();\r\n        }\r\n    }\r\n    private loadInstruction(eip: number): Instruction\r\n    {\r\n        return this.program.getInstructionByAddress(this, eip);\r\n    }\r\n\r\n    private getLine(): number\r\n    {\r\n        return this.program.lineMap.getLineByAddress(this.eip) + 1;\r\n    }\r\n\r\n    private scheduleRun()\r\n    {\r\n        this.clearScheduledRun();\r\n        this.scheduleTimeout = setTimeout(() => this.tickStep(), this.tickRate);\r\n    }\r\n    private clearScheduledRun()\r\n    {\r\n        if (this.scheduleTimeout !== null)\r\n        {\r\n            clearTimeout(this.scheduleTimeout);\r\n        }\r\n    }\r\n    private tickStep()\r\n    {\r\n        if (this.running)\r\n        {\r\n            this.step();\r\n            this.scheduleRun();\r\n        }\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/emulation/cpu.ts","import {CPU} from \"../cpu\";\r\nimport {BinaryOperation, UnaryReadOperation, UnaryWriteOperation} from \"./instruction\";\r\nimport {RuntimeException} from \"../runtime-exception\";\r\n\r\nexport class Add extends BinaryOperation\r\n{\r\n    execute(cpu: CPU): number\r\n    {\r\n        this.target.setValue(cpu.alu.add(this.target.getValue(), this.source.getValue()));\r\n        return cpu.getNextInstruction();\r\n    }\r\n}\r\nexport class AddWithCarry extends Add\r\n{\r\n    execute(cpu: CPU): number\r\n    {\r\n        this.target.setValue(cpu.alu.add(this.target.getValue(), this.source.getValue(), cpu.statusWord.carry ? 1 : 0));\r\n        return cpu.getNextInstruction();\r\n    }\r\n}\r\n\r\nexport class Sub extends BinaryOperation\r\n{\r\n    execute(cpu: CPU): number\r\n    {\r\n        this.target.setValue(cpu.alu.sub(this.target.getValue(), this.source.getValue()));\r\n        return cpu.getNextInstruction();\r\n    }\r\n}\r\nexport class SubWithBorrow extends Sub\r\n{\r\n    execute(cpu: CPU): number\r\n    {\r\n        this.target.setValue(cpu.alu.sub(this.target.getValue(), this.source.getValue(), cpu.statusWord.carry ? 1 : 0));\r\n        return cpu.getNextInstruction();\r\n    }\r\n}\r\n\r\nexport class Increment extends UnaryWriteOperation\r\n{\r\n    execute(cpu: CPU): number\r\n    {\r\n        this.target.setValue(cpu.alu.inc(this.target.getValue()));\r\n        return cpu.getNextInstruction();\r\n    }\r\n}\r\nexport class Decrement extends UnaryWriteOperation\r\n{\r\n    execute(cpu: CPU): number\r\n    {\r\n        this.target.setValue(cpu.alu.dec(this.target.getValue()));\r\n        return cpu.getNextInstruction();\r\n    }\r\n}\r\n\r\nexport class DivideSigned extends UnaryReadOperation\r\n{\r\n    public execute(cpu: CPU): number\r\n    {\r\n        if (this.target.getValue() === 0)\r\n        {\r\n            throw new RuntimeException(\"Division by zero\");\r\n        }\r\n\r\n        let edx = cpu.getRegisterByName(\"EDX\").getValue();\r\n        let eax = cpu.getRegisterByName(\"EAX\").getValue();\r\n\r\n        let value: number = cpu.alu.extend64bit(eax, edx);\r\n        let result: { value: number, remainder: number } = cpu.alu.idivide(value, this.target.getValue());\r\n\r\n        cpu.getRegisterByName(\"EDX\").setValue(result.remainder);\r\n        cpu.getRegisterByName(\"EAX\").setValue(result.value);\r\n\r\n        return cpu.getNextInstruction();\r\n    }\r\n}\r\nexport class MultiplySigned extends UnaryReadOperation\r\n{\r\n    public execute(cpu: CPU): number\r\n    {\r\n        let eax = cpu.getRegisterByName(\"EAX\").getValue();\r\n        let result: { lowerHalf: number, upperHalf: number } = cpu.alu.imultiply(eax, this.target.getValue());\r\n\r\n        cpu.getRegisterByName(\"EDX\").setValue(result.upperHalf);\r\n        cpu.getRegisterByName(\"EAX\").setValue(result.lowerHalf);\r\n\r\n        return cpu.getNextInstruction();\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/emulation/instruction/arithmetic.ts","import {BinaryOperation} from \"./instruction\";\r\nimport {CPU} from \"../cpu\";\r\n\r\nexport class And extends BinaryOperation\r\n{\r\n    execute(cpu: CPU): number\r\n    {\r\n        this.target.setValue(cpu.alu.and(this.target.getValue(), this.source.getValue()));\r\n        return cpu.getNextInstruction();\r\n    }\r\n}\r\nexport class Or extends BinaryOperation\r\n{\r\n    execute(cpu: CPU): number\r\n    {\r\n        this.target.setValue(cpu.alu.or(this.target.getValue(), this.source.getValue()));\r\n        return cpu.getNextInstruction();\r\n    }\r\n}\r\nexport class Xor extends BinaryOperation\r\n{\r\n    execute(cpu: CPU): number\r\n    {\r\n        this.target.setValue(cpu.alu.xor(this.target.getValue(), this.source.getValue()));\r\n        return cpu.getNextInstruction();\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/emulation/instruction/bitwise.ts","import {BinaryOperation} from \"./instruction\";\r\nimport {CPU} from \"../cpu\";\r\nimport {Parameter} from \"./parameter\";\r\n\r\nexport class Compare extends BinaryOperation\r\n{\r\n    execute(cpu: CPU): number\r\n    {\r\n        cpu.alu.sub(this.target.getValue(), this.source.getValue());\r\n        return cpu.getNextInstruction();\r\n    }\r\n\r\n    getValidParameters(): string[][]\r\n    {\r\n        return [\r\n            [Parameter.Reg, Parameter.Reg],\r\n            [Parameter.Reg, Parameter.Memory],\r\n            [Parameter.Memory, Parameter.Reg]\r\n        ];\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/emulation/instruction/cmp.ts","import {Instruction} from \"./instruction\";\r\nimport {CPU} from \"../cpu\";\r\n\r\nexport class SetDirection extends Instruction\r\n{\r\n    execute(cpu: CPU): number\r\n    {\r\n        cpu.statusWord.direction = true;\r\n        return cpu.getNextInstruction();\r\n    }\r\n}\r\nexport class ClearDirection extends Instruction\r\n{\r\n    execute(cpu: CPU): number\r\n    {\r\n        cpu.statusWord.direction = false;\r\n        return cpu.getNextInstruction();\r\n    }\r\n}\r\n\r\nexport class SetCarry extends Instruction\r\n{\r\n    execute(cpu: CPU): number\r\n    {\r\n        cpu.statusWord.carry = true;\r\n        return cpu.getNextInstruction();\r\n    }\r\n}\r\nexport class ClearCarry extends Instruction\r\n{\r\n    execute(cpu: CPU): number\r\n    {\r\n        cpu.statusWord.carry = false;\r\n        return cpu.getNextInstruction();\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/emulation/instruction/flags.ts","import {Instruction} from \"./instruction\";\r\nimport {CPU} from \"../cpu\";\r\n\r\nexport class Halt extends Instruction\r\n{\r\n    execute(cpu: CPU): number\r\n    {\r\n        cpu.halt();\r\n        return cpu.eip;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/emulation/instruction/halt.ts","import {CPU} from \"../cpu\";\r\nimport {MemoryView} from \"../memory-view\";\r\nimport {Parameter} from \"./parameter\";\r\n\r\nexport abstract class Instruction\r\n{\r\n    static get BINARY_WRITE_READ_PARAMS(): string[][] {\r\n        return [\r\n            [Parameter.Reg, Parameter.Reg],\r\n            [Parameter.Reg, Parameter.Constant],\r\n            [Parameter.Reg, Parameter.DerefConstant],\r\n            [Parameter.Reg, Parameter.Memory],\r\n            [Parameter.Memory, Parameter.Reg],\r\n            [Parameter.Memory, Parameter.Constant],\r\n            [Parameter.DerefConstant, Parameter.Reg],\r\n            [Parameter.DerefConstant, Parameter.Constant]\r\n        ];\r\n    }\r\n    static get UNARY_READ_PARAMS(): string[][] {\r\n        return [\r\n            [Parameter.Constant],\r\n            [Parameter.Reg],\r\n            [Parameter.Memory],\r\n            [Parameter.DerefConstant]\r\n        ];\r\n    }\r\n    static get UNARY_WRITE_PARAMS(): string[][] {\r\n        return [\r\n            [Parameter.Reg],\r\n            [Parameter.Memory],\r\n            [Parameter.DerefConstant]\r\n        ];\r\n    }\r\n\r\n    get validParameters(): string[][]\r\n    {\r\n        return [\r\n            []\r\n        ];\r\n    }\r\n\r\n    abstract execute(cpu: CPU): number;\r\n    loadParameters(...args: any[]): void { }\r\n\r\n    toString(): string\r\n    {\r\n        return this.constructor.toString();\r\n    }\r\n}\r\n\r\nexport abstract class UnaryOperation extends Instruction\r\n{\r\n    protected target: MemoryView;\r\n\r\n    loadParameters(target: MemoryView)\r\n    {\r\n        this.target = target;\r\n    }\r\n}\r\n\r\nexport abstract class UnaryReadOperation extends UnaryOperation\r\n{\r\n    get validParameters(): string[][]\r\n    {\r\n        return Instruction.UNARY_READ_PARAMS;\r\n    }\r\n}\r\nexport abstract class UnaryWriteOperation extends UnaryOperation\r\n{\r\n    get validParameters(): string[][]\r\n    {\r\n        return Instruction.UNARY_WRITE_PARAMS;\r\n    }\r\n}\r\n\r\nexport abstract class BinaryOperation extends Instruction\r\n{\r\n    protected target: MemoryView;\r\n    protected source: MemoryView;\r\n\r\n    get validParameters(): string[][]\r\n    {\r\n        return Instruction.BINARY_WRITE_READ_PARAMS;\r\n    }\r\n\r\n    loadParameters(target: MemoryView, source: MemoryView)\r\n    {\r\n        this.target = target;\r\n        this.source = source;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/emulation/instruction/instruction.ts","import {UnaryReadOperation} from \"./instruction\";\r\nimport {CPU} from \"../cpu\";\r\nimport {MemoryView} from \"../memory-view\";\r\n\r\nexport class Interrupt extends UnaryReadOperation\r\n{\r\n    private number: MemoryView;\r\n\r\n    execute(cpu: CPU): number\r\n    {\r\n        cpu.onInterrupt.emit(this.number.getValue());\r\n        return cpu.getNextInstruction();\r\n    }\r\n\r\n    loadParameters(number: MemoryView): void\r\n    {\r\n        this.number = number;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/emulation/instruction/interrupt.ts","import {UnaryReadOperation} from \"./instruction\";\r\nimport {CPU} from \"../cpu\";\r\n\r\nexport class Jump extends UnaryReadOperation\r\n{\r\n    execute(cpu: CPU): number\r\n    {\r\n        return this.target.getValue();\r\n    }\r\n\r\n    protected jumpIf(cpu: CPU, condition: boolean): number\r\n    {\r\n        return condition ? this.target.getValue() : cpu.eip + 1;\r\n    }\r\n}\r\n\r\nexport class Loop extends Jump\r\n{\r\n    execute(cpu: CPU): number\r\n    {\r\n        cpu.getRegisterByName(\"ECX\").setValue(cpu.getRegisterByName(\"ECX\").getValue() - 1);\r\n\r\n        return this.jumpIf(cpu, cpu.getRegisterByName(\"ECX\").getValue() !== 0);\r\n    }\r\n}\r\nexport class LoopE extends Jump\r\n{\r\n    execute(cpu: CPU): number\r\n    {\r\n        cpu.getRegisterByName(\"ECX\").setValue(cpu.getRegisterByName(\"ECX\").getValue() - 1);\r\n\r\n        return this.jumpIf(cpu, cpu.getRegisterByName(\"ECX\").getValue() !== 0 && cpu.statusWord.zero);\r\n    }\r\n}\r\nexport class LoopNE extends Jump\r\n{\r\n    execute(cpu: CPU): number\r\n    {\r\n        cpu.getRegisterByName(\"ECX\").setValue(cpu.getRegisterByName(\"ECX\").getValue() - 1);\r\n\r\n        return this.jumpIf(cpu, cpu.getRegisterByName(\"ECX\").getValue() !== 0 && !cpu.statusWord.zero);\r\n    }\r\n}\r\n\r\nexport class JumpO extends Jump\r\n{\r\n    execute(cpu: CPU): number\r\n    {\r\n        return this.jumpIf(cpu, cpu.conditionUnit.overflow);\r\n    }\r\n}\r\nexport class JumpNO extends Jump\r\n{\r\n    execute(cpu: CPU): number\r\n    {\r\n        return this.jumpIf(cpu, !cpu.conditionUnit.overflow);\r\n    }\r\n}\r\n\r\nexport class JumpS extends Jump\r\n{\r\n    execute(cpu: CPU): number\r\n    {\r\n        return this.jumpIf(cpu, cpu.conditionUnit.sign);\r\n    }\r\n}\r\nexport class JumpNS extends Jump\r\n{\r\n    execute(cpu: CPU): number\r\n    {\r\n        return this.jumpIf(cpu, !cpu.conditionUnit.sign);\r\n    }\r\n}\r\n\r\nexport class JumpE extends Jump\r\n{\r\n    execute(cpu: CPU): number\r\n    {\r\n        return this.jumpIf(cpu, cpu.conditionUnit.equal);\r\n    }\r\n}\r\nexport class JumpNE extends Jump\r\n{\r\n    execute(cpu: CPU): number\r\n    {\r\n        return this.jumpIf(cpu, !cpu.conditionUnit.equal);\r\n    }\r\n}\r\n\r\nexport class JumpB extends Jump\r\n{\r\n    execute(cpu: CPU): number\r\n    {\r\n        return this.jumpIf(cpu, cpu.conditionUnit.below);\r\n    }\r\n}\r\nexport class JumpAE extends Jump\r\n{\r\n    execute(cpu: CPU): number\r\n    {\r\n        return this.jumpIf(cpu, !cpu.conditionUnit.below);\r\n    }\r\n}\r\n\r\nexport class JumpA extends Jump\r\n{\r\n    execute(cpu: CPU): number\r\n    {\r\n        return this.jumpIf(cpu, cpu.conditionUnit.above);\r\n    }\r\n}\r\nexport class JumpBE extends Jump\r\n{\r\n    execute(cpu: CPU): number\r\n    {\r\n        return this.jumpIf(cpu, !cpu.conditionUnit.above);\r\n    }\r\n}\r\n\r\nexport class JumpL extends Jump\r\n{\r\n    execute(cpu: CPU): number\r\n    {\r\n        return this.jumpIf(cpu, cpu.conditionUnit.less);\r\n    }\r\n}\r\nexport class JumpGE extends Jump\r\n{\r\n    execute(cpu: CPU): number\r\n    {\r\n        return this.jumpIf(cpu, !cpu.conditionUnit.less);\r\n    }\r\n}\r\n\r\nexport class JumpLE extends Jump\r\n{\r\n    execute(cpu: CPU): number\r\n    {\r\n        return this.jumpIf(cpu, !cpu.conditionUnit.greater);\r\n    }\r\n}\r\nexport class JumpG extends Jump\r\n{\r\n    execute(cpu: CPU): number\r\n    {\r\n        return this.jumpIf(cpu, cpu.conditionUnit.greater);\r\n    }\r\n}\r\n\r\nexport class JumpP extends Jump\r\n{\r\n    execute(cpu: CPU): number\r\n    {\r\n        return this.jumpIf(cpu, cpu.conditionUnit.parity);\r\n    }\r\n}\r\nexport class JumpNP extends Jump\r\n{\r\n    execute(cpu: CPU): number\r\n    {\r\n        return this.jumpIf(cpu, !cpu.conditionUnit.parity);\r\n    }\r\n}\r\n\r\nexport class JumpCXZ extends Jump\r\n{\r\n    execute(cpu: CPU): number\r\n    {\r\n        return this.jumpIf(cpu, cpu.getRegisterByName(\"CX\").getValue() === 0);\r\n    }\r\n}\r\nexport class JumpECXZ extends Jump\r\n{\r\n    execute(cpu: CPU): number\r\n    {\r\n        return this.jumpIf(cpu, cpu.getRegisterByName(\"ECX\").getValue() === 0);\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/emulation/instruction/jump.ts","import {BinaryOperation} from \"./instruction\";\r\nimport {CPU} from \"../cpu\";\r\nimport {MemoryView} from \"../memory-view\";\r\n\r\nexport class Move extends BinaryOperation\r\n{\r\n    execute(cpu: CPU): number\r\n    {\r\n        this.target.setValue(this.source.getValue());\r\n        return cpu.getNextInstruction();\r\n    }\r\n\r\n    loadParameters(target: MemoryView, source: MemoryView)\r\n    {\r\n        this.target = target;\r\n        this.source = source;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/emulation/instruction/mov.ts","import {MemoryView} from \"../memory-view\";\r\nimport {NumericConstant} from \"../memory-view\";\r\nimport {CPU, REGISTER_INDEX} from \"../cpu\";\r\n\r\nexport interface Indexer\r\n{\r\n    indexReg: number;\r\n    multiplier: number;\r\n    constant: number;\r\n}\r\n\r\nexport abstract class Parameter\r\n{\r\n    public static get Reg() { return \"Reg\"; }\r\n    public static get Memory() { return \"Mem\"; }\r\n    public static get Constant() { return \"Constant\"; }\r\n    public static get DerefConstant() { return \"DerefConstant\"; }\r\n\r\n    constructor(protected size: number = 4)\r\n    {\r\n\r\n    }\r\n\r\n    abstract fetchData(cpu: CPU): MemoryView;\r\n}\r\n\r\nexport class RegisterParameter extends Parameter\r\n{\r\n    constructor(size: number, private registerIndex: number)\r\n    {\r\n        super(size);\r\n    }\r\n\r\n    fetchData(cpu: CPU): MemoryView\r\n    {\r\n        return cpu.getRegisterByIndex(this.registerIndex);\r\n    }\r\n}\r\n\r\nexport class MemoryParameter extends Parameter\r\n{\r\n    constructor(size: number,\r\n                private baseReg: number,\r\n                private indexer: Indexer)\r\n    {\r\n        super(size);\r\n    }\r\n\r\n    fetchData(cpu: CPU): MemoryView\r\n    {\r\n        let baseReg: MemoryView = cpu.getRegisterByIndex(this.baseReg);\r\n        let indexReg: MemoryView = cpu.getRegisterByIndex(this.indexer.indexReg);\r\n\r\n        return cpu.derefAddress(cpu.calculateEffectiveAddressFromRegister(baseReg, indexReg, this.indexer.multiplier, this.indexer.constant), this.size);\r\n    }\r\n}\r\n\r\nexport class LabelParameter extends Parameter\r\n{\r\n    protected value: number = -1;\r\n\r\n    constructor(size: number,\r\n                private _label: string = \"\")\r\n    {\r\n        super(size);\r\n    }\r\n\r\n    get label(): string\r\n    {\r\n        return this._label;\r\n    }\r\n    set label(value: string)\r\n    {\r\n        this._label = value;\r\n    }\r\n\r\n    resolveLabel(value: number)\r\n    {\r\n        this.value = value;\r\n    }\r\n\r\n    fetchData(cpu: CPU): MemoryView\r\n    {\r\n        return new NumericConstant(this.value, this.size);\r\n    }\r\n}\r\n\r\nexport class DerefLabelParameter extends LabelParameter\r\n{\r\n    constructor(size: number,\r\n                label: string = \"\",\r\n                private indexer: Indexer)\r\n    {\r\n        super(size, label);\r\n    }\r\n\r\n    fetchData(cpu: CPU): MemoryView\r\n    {\r\n        let indexReg: MemoryView = cpu.getRegisterByIndex(this.indexer.indexReg);\r\n        return cpu.derefAddress(cpu.calculateEffectiveAddress(this.value, indexReg, this.indexer.multiplier, this.indexer.constant), this.size);\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/emulation/instruction/parameter.ts","import {UnaryWriteOperation} from \"./instruction\";\r\nimport {CPU} from \"../cpu\";\r\n\r\nexport class Pop extends UnaryWriteOperation\r\n{\r\n    execute(cpu: CPU): number\r\n    {\r\n        this.target.setValue(cpu.pop());\r\n        return cpu.getNextInstruction();\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/emulation/instruction/pop.ts","import {CPU} from \"../cpu\";\r\nimport {UnaryReadOperation} from \"./instruction\";\r\n\r\nexport class Push extends UnaryReadOperation\r\n{\r\n    execute(cpu: CPU): number\r\n    {\r\n        cpu.push(this.target.getValue());\r\n        return cpu.getNextInstruction();\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/emulation/instruction/push.ts","import {Instruction, UnaryReadOperation} from \"./instruction\";\r\nimport {CPU} from \"../cpu\";\r\n\r\nexport class Enter extends Instruction\r\n{\r\n    execute(cpu: CPU): number\r\n    {\r\n        cpu.push(cpu.getRegisterByName(\"EBP\").getValue());\r\n        cpu.getRegisterByName(\"EBP\").setValue(cpu.getRegisterByName(\"ESP\").getValue());\r\n\r\n        return cpu.getNextInstruction();\r\n    }\r\n}\r\n\r\nexport class Leave extends Instruction\r\n{\r\n    execute(cpu: CPU): number\r\n    {\r\n        cpu.getRegisterByName(\"EBP\").setValue(cpu.pop());\r\n        return cpu.getNextInstruction();\r\n    }\r\n}\r\n\r\nexport class Call extends UnaryReadOperation\r\n{\r\n    execute(cpu: CPU): number\r\n    {\r\n        cpu.push(cpu.eip + 1);\r\n        return this.target.getValue();\r\n    }\r\n}\r\n\r\nexport class Return extends Instruction\r\n{\r\n    execute(cpu: CPU): number\r\n    {\r\n        return cpu.pop();\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/emulation/instruction/retcall.ts","import {MemoryView} from \"./memory-view\";\r\n\r\nexport class MemoryBlock\r\n{\r\n    private _data: ArrayBuffer;\r\n\r\n    constructor(size: number)\r\n    {\r\n        this._data = new ArrayBuffer(size);\r\n    }\r\n\r\n    public load(address: number, size: number = 4, signed: boolean = false): MemoryView\r\n    {\r\n        return new MemoryView(this, size, address, signed);\r\n    }\r\n    public isValid(address: number): boolean\r\n    {\r\n        return address >= 0 && address < this.size;\r\n    }\r\n\r\n    public clear()\r\n    {\r\n        for (let i = 0; i < this.size; i++)\r\n        {\r\n            this.load(i, 1).setValue(0);\r\n        }\r\n    }\r\n\r\n    get data(): ArrayBuffer { return this._data; }\r\n    get size(): number { return this.data.byteLength; }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/emulation/memory-block.ts","import {MemoryBlock} from \"./memory-block\";\r\n\r\nconst GET_METHODS = {\r\n    \"1\": [\"getUint8\", \"getInt8\"],\r\n    \"2\": [\"getUint16\", \"getInt16\"],\r\n    \"4\": [\"getUint32\", \"getInt32\"]\r\n};\r\nconst SET_METHODS = {\r\n    \"1\": [\"setUint8\", \"setInt8\"],\r\n    \"2\": [\"setUint16\", \"setInt16\"],\r\n    \"4\": [\"setUint32\", \"setInt32\"]\r\n};\r\n\r\nexport class MemoryView\r\n{\r\n    private memory: MemoryBlock;\r\n    private view: DataView;\r\n    private byteSize: number;\r\n    private index: number;\r\n    private signed: boolean;\r\n    private getMethod: string;\r\n    private setMethod: string;\r\n\r\n    constructor(memory: MemoryBlock, byteSize: number, index: number = 0, signed: boolean = false)\r\n    {\r\n        this.memory = memory;\r\n        this.byteSize = byteSize;\r\n        this.index = index;\r\n        this.signed = signed;\r\n\r\n        this.view = new DataView(this.memory.data, index);\r\n        let signedIndex: number = signed ? 1 : 0;\r\n        this.getMethod = GET_METHODS[byteSize.toString()][signedIndex];\r\n        this.setMethod = SET_METHODS[byteSize.toString()][signedIndex];\r\n    }\r\n\r\n    setValue(value: number)\r\n    {\r\n        this.view[this.setMethod](0, value, true);\r\n    }\r\n    getValue(): number\r\n    {\r\n        return this.view[this.getMethod](0, true);\r\n    }\r\n    add(value: number)\r\n    {\r\n        this.setValue(this.getValue() + value);\r\n    }\r\n\r\n    getOffsetView(offset: number, byteSize?: number, signed: boolean = false)\r\n    {\r\n        if (byteSize === undefined)\r\n        {\r\n            byteSize = this.byteSize;\r\n        }\r\n\r\n        return new MemoryView(this.memory, byteSize, this.index + offset, signed);\r\n    }\r\n\r\n    resize(size: number): MemoryView\r\n    {\r\n        return new MemoryView(this.memory, size, this.index, this.signed);\r\n    }\r\n\r\n    get size(): number { return this.byteSize; }\r\n}\r\n\r\nexport class NumericConstant extends MemoryView\r\n{\r\n    constructor(value: number, byteSize: number = 4, signed: boolean = false)\r\n    {\r\n        super(new MemoryBlock(byteSize), byteSize, 0, signed);\r\n        super.setValue(value);\r\n    }\r\n\r\n    setValue(value: number)\r\n    {\r\n        throw new Error(\"Numeric constant's value cannot be changed\");\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/emulation/memory-view.ts","import {CPU} from \"./cpu\";\r\nimport {MemoryDefinition} from \"../assembly/assembler\";\r\nimport {MemoryBlock} from \"./memory-block\";\r\n\r\nexport class Process\r\n{\r\n    private started: boolean = false;\r\n\r\n    constructor(private _cpu: CPU)\r\n    {\r\n        this.cpu.onExit.subscribe((cpu: CPU) => this.started = false);\r\n    }\r\n\r\n    get cpu(): CPU\r\n    {\r\n        return this._cpu;\r\n    }\r\n\r\n    public start(sync: boolean = false)\r\n    {\r\n        this.started = true;\r\n        this.reset();\r\n        this.initMemory();\r\n\r\n        if (sync)\r\n        {\r\n            this.cpu.runSync();\r\n        }\r\n        else this.cpu.run();\r\n    }\r\n\r\n    public isStarted(): boolean\r\n    {\r\n        return this.started;\r\n    }\r\n    public isRunning(): boolean\r\n    {\r\n        return this.isStarted() && this.cpu.running;\r\n    }\r\n    public isPaused(): boolean\r\n    {\r\n        return this.isStarted() && !this.cpu.running;\r\n    }\r\n\r\n    public reset()\r\n    {\r\n        this.cpu.reset();\r\n        this.cpu.memory.clear();\r\n    }\r\n\r\n    private initMemory()\r\n    {\r\n        let memoryDefinitions: MemoryDefinition[] = this.cpu.program.memoryDefinitions;\r\n        let memory: MemoryBlock = this.cpu.memory;\r\n\r\n        for (const memoryDef of memoryDefinitions)\r\n        {\r\n            memory.load(memoryDef.address, memoryDef.size).setValue(memoryDef.value);\r\n        }\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/emulation/process.ts","export class RuntimeException extends Error\r\n{\r\n    constructor(public message: string = \"\")\r\n    {\r\n        super(message);\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/emulation/runtime-exception.ts","import {Process} from \"./process\";\r\n\r\nexport class Runtime\r\n{\r\n    private _process: Process = null;\r\n\r\n    get process(): Process\r\n    {\r\n        return this._process;\r\n    }\r\n    set process(process: Process)\r\n    {\r\n        this._process = process;\r\n    }\r\n\r\n    public hasProcess(): boolean\r\n    {\r\n        return this.process !== null;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/emulation/runtime.ts","export class StatusWord\r\n{\r\n    private _carry: boolean = false;\r\n    private _zero: boolean = false;\r\n    private _overflow: boolean = false;\r\n    private _signum: boolean = false;\r\n    private _parity: boolean = false;\r\n    private _direction: boolean = false;\r\n\r\n    get carry(): boolean\r\n    {\r\n        return this._carry;\r\n    }\r\n    set carry(value: boolean)\r\n    {\r\n        this._carry = value;\r\n    }\r\n\r\n    get zero(): boolean\r\n    {\r\n        return this._zero;\r\n    }\r\n    set zero(value: boolean)\r\n    {\r\n        this._zero = value;\r\n    }\r\n\r\n    get overflow(): boolean\r\n    {\r\n        return this._overflow;\r\n    }\r\n    set overflow(value: boolean)\r\n    {\r\n        this._overflow = value;\r\n    }\r\n\r\n    get signum(): boolean\r\n    {\r\n        return this._signum;\r\n    }\r\n    set signum(value: boolean)\r\n    {\r\n        this._signum = value;\r\n    }\r\n\r\n    get parity(): boolean\r\n    {\r\n        return this._parity;\r\n    }\r\n\r\n    set parity(value: boolean)\r\n    {\r\n        this._parity = value;\r\n    }\r\n\r\n    get direction(): boolean\r\n    {\r\n        return this._direction;\r\n    }\r\n    set direction(value: boolean)\r\n    {\r\n        this._direction = value;\r\n    }\r\n\r\n    toString(): string\r\n    {\r\n        return \"[CF: \" + this.carry + \", ZF: \" + this.zero + \", OF: \" + this.overflow\r\n            + \" SF: \" + this.signum + \", DF: \" + this.direction + \"]\";\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/emulation/status-word.ts","// The file contents for the current environment will overwrite these during build.\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\n// The list of which env maps to which file can be found in `.angular-cli.json`.\n\nexport const environment = {\n  production: false\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/environments/environment.ts","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n\n\n\n// WEBPACK FOOTER //\n// ./src/main.ts"],"sourceRoot":"webpack:///"}